package analizadores; 
import java_cup.runtime.*;
import analizadores.*;
import java.util.ArrayList;
import principal.*;
import java.util.LinkedList;

import Structures.Production;
import Structures.Instructions.Instruccion;
import Structures.Node;
import Structures.Arbol;
parser code
{:

    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    // error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

         ArrayList<String> errores = new ArrayList<String>();
            errores.add(lexema);
            errores.add(String.valueOf(fila));
            errores.add(String.valueOf(columna));
            Main.errores.add(errores);
        System.out.println("=======Error Sintactico Recuperado========");


    }

    //momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("=======ErrorIrrecuperable=========");

    }

    public Arbol getArbol()
    {
        return arbol;
    }
    public LinkedList<Instruccion> getAST()
    {
        return AST;
    }
:}

terminal String verdadero, falso, decimal, entero, cadena, caracter, comentario_linea, comentario_multilinea, variable, asignacionSimbolo, mas, menos;
terminal String potencia, por, dividido, booleano, mod, mayor, menor, mayor_o_igual, menor_o_igual, es_igual, es_diferente, or, and, not, inicio, fin;
terminal String ingresar, como, con_valor, si, fin_si, de_lo_contrario, o_si, segun, entonces, fin_segun, para, hasta, fin_para, con, incremental;
terminal String mientras, hacer, fin_mientras, repetir, hasta_que, retornar, metodo, fin_metodo, con_parametros, funcion, fin_funcion, ejecutar, imprimir, imprimir_nl;
terminal String numero, valorcadena, valorcaracter, puntocoma, coma, corCerrar, corAbrir, interroganteIzquierdo, interroganteDerecho;
terminal String parAbierto, parCerrado, caracter_ascii;

non terminal INICIO;
non terminal INSTRUCCIONES, INSTRUCCION, DECLARACION, OPERACION, OPERACIONES, VARIABLE_RELACIONAL;
non terminal ASIGNACION, COMENTARIO, CONDICIONAL, CONDICIONAL_RECURSIVO, EJECUTAR;
non terminal SELECCION, SELECCION_RECURSIVO, LISTAVARIABLES, EXPRESION, VARIABLE_CICLO;
non terminal EXPRESION_RELACIONAL, VALOR_RACIONAL, PARA, MIENTRAS, REPETIR;
non terminal RETORNO, METODO, FUNCION, IMPRIMIR, PARAMETROS_RECURSIVO, TIPO;

precedence left mas, menos;
precedence left por, dividido, mod;
precedence left potencia;


start with INICIO;

INICIO::= inicio INSTRUCCIONES:a fin {:System.out.println("Fin del an√°lisis");
                        parser.AST = a.getInstructions();
                        Node NODERAIZ = new Node("INIT");
                        NODERAIZ.addSon("inicio");
                        NODERAIZ.addSon(a.getNode());
                        NODERAIZ.addSon("fin");
                        parser.arbol=new Arbol(NODERAIZ);
                     :}
;

INSTRUCCIONES::= INSTRUCCIONES:b INSTRUCCION:a  {:
                                            RESULT=new Production(new Node("Instrucciones"), a.getInstructions());
                                            RESULT.addIns(b.getIns());
                                            RESULT.addSon(a);
                                            RESULT.addSon(b);
                                         :}
| INSTRUCCION:a {:
                RESULT=new Production(new Node("Instrucciones"), new LinkedList<>());
                RESULT.addIns(a.getIns());
                RESULT.addSon(a);

                :}
;

INSTRUCCION::=
DECLARACION:a {:
            RESULT=new Production(new Node("Instruccion"), new Declaracion((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| ASIGNACION:a {:
            RESULT=new Production(new Node("Instruccion"), new Asignacion((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| CONDICIONAL:a {:
            RESULT=new Production(new Node("Instruccion"), new Condicional((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| SELECCION:a {:
            RESULT=new Production(new Node("Instruccion"), new Seleccion((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| PARA:a {:
            RESULT=new Production(new Node("Instruccion"), new Para((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| MIENTRAS:a {:
            RESULT=new Production(new Node("Instruccion"), new Mientras((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| REPETIR:a {:
            RESULT=new Production(new Node("Instruccion"), new Repetir((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| RETORNO:a {:
            RESULT=new Production(new Node("Instruccion"), new Retorno((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| METODO:a {:
            RESULT=new Production(new Node("Instruccion"), new Metodo((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| EJECUTAR:a {:
            RESULT=new Production(new Node("Instruccion"), new Ejecutar((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| FUNCION:a {:
            RESULT=new Production(new Node("Instruccion"), new Funcion((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| IMPRIMIR:a {:
            RESULT=new Production(new Node("Instruccion"), new Imprimir((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
| COMENTARIO:a {:
            RESULT=new Production(new Node("Instruccion"), new Comentario((Operacion)a.getIns()));
            RESULT.addSon(a);
            :}
;

DECLARACION::=
ingresar LISTAVARIABLES:a como numero con_valor EXPRESION:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(a.getIns(), b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("numero");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
| ingresar LISTAVARIABLES:a como cadena con_valor valorcadena:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(a.getIns(), b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("cadena");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
| ingresar LISTAVARIABLES:a como caracter con_valor valorcaracter:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(a.getIns(), b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("caracter");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
| ingresar LISTAVARIABLES:a como caracter con_valor caracter:b_ascii puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(a.getIns(), b_ascii.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("caracter");
            RESULT.addSon("con_valor");
            RESULT.addSon(b_ascii);
            RESULT.addSon(";");
            :}
| ingresar LISTAVARIABLES:a como booleano con_valor verdadero:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(a.getIns(), b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("boolean");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
| ingresar LISTAVARIABLES:a como booleano con_valor falso:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(a.getIns(), b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("boolean");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
| ingresar LISTAVARIABLES:a como booleano con_valor EXPRESION_RELACIONAL:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(a.getIns(), b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("boolean");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
;

ASIGNACION::=
LISTAVARIABLES:a asignacionSimbolo EXPRESION:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(a.getIns(), b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|LISTAVARIABLES:a asignacionSimbolo valorcadena:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(a.getIns(), b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|LISTAVARIABLES:a asignacionSimbolo valorcaracter:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(a.getIns(), b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|LISTAVARIABLES:a asignacionSimbolo caracter_ascii:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(a.getIns(), b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|LISTAVARIABLES:a asignacionSimbolo verdadero:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(a.getIns(), b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|LISTAVARIABLES:a asignacionSimbolo falso:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(a.getIns(), b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
;

COMENTARIO::=
comentario_linea:a {:
            RESULT=new Production(new Node("Comentario"), new Comentario(a.getIns()));
            RESULT.addSon(a);
            :}
| comentario_multilinea:a {:
            RESULT=new Production(new Node("ComentarioMl"), new ComentarioMl(a.getIns()));
            RESULT.addSon(a);
            :}
;

CONDICIONAL::=
si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b fin_si {:
            RESULT=new Production(new Node("Condicional"), new Condicional(a.getIns(), b.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon("fin_si");
            :}
| si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b de_lo_contrario INSTRUCCIONES:c fin_si {:
            RESULT=new Production(new Node("Condicional"), new Condicional(a.getIns(), b.getInstructions(), c.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon("de_lo_contrario");
            RESULT.addSon(c);
            RESULT.addSon("fin_si");
            :}
| si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b CONDICIONAL_RECURSIVO:c de_lo_contrario INSTRUCCIONES:d fin_si {:
            RESULT=new Production(new Node("Condicional"), new Condicional(a.getIns(), b.getInstructions(), c.getInstructions(), d.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon(c);
            RESULT.addSon("de_lo_contrario");
            RESULT.addSon(d);
            RESULT.addSon("fin_si");
            :}
| si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b CONDICIONAL_RECURSIVO:c fin_si {:
            RESULT=new Production(new Node("Condicional"), new Condicional(a.getIns(), b.getInstructions(), c.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon(c);
            RESULT.addSon("fin_si");
            :}
;

CONDICIONAL_RECURSIVO::=
CONDICIONAL_RECURSIVO:a o_si EXPRESION_RELACIONAL:b entonces INSTRUCCIONES:c {:
            RESULT=new Production(new Node("Condicional_Recursivo"), new Condicional_Recursivo(a.getInstructions(), b.getIns(), c.getInstructions()));
            RESULT.addSon(a);
            RESULT.addSon("o_si");
            RESULT.addSon(b);
            RESULT.addSon("entonces");
            RESULT.addSon(c);
            :}
|o_si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b {:
            RESULT=new Production(new Node("Condicional_Recursivo"), new Condicional_Recursivo(a.getIns(), b.getInstructions()));
            RESULT.addSon("o_si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            :}
;

SELECCION::=
segun EXPRESION:a hacer SELECCION_RECURSIVO:b de_lo_contrario entonces INSTRUCCIONES:c fin_segun {:
            RESULT=new Production(new Node("Seleccion"), new Seleccion(a.getIns(), b.getInstructions(), c.getInstructions()));
            RESULT.addSon("segun");
            RESULT.addSon(a);
            RESULT.addSon("hacer");
            RESULT.addSon(b);
            RESULT.addSon("de_lo_contrario");
            RESULT.addSon("entonces");
            RESULT.addSon(c);
            RESULT.addSon("fin_segun");
            :}
| segun EXPRESION:a hacer SELECCION_RECURSIVO:b fin_segun {:
            RESULT=new Production(new Node("Seleccion"), new Seleccion(a.getIns(), b.getInstructions()));
            RESULT.addSon("segun");
            RESULT.addSon(a);
            RESULT.addSon("hacer");
            RESULT.addSon(b);
            RESULT.addSon("fin_segun");
            :}
;

SELECCION_RECURSIVO::=
interroganteIzquierdo EXPRESION:a interroganteDerecho entonces INSTRUCCIONES:b SELECCION_RECURSIVO:c {:
            RESULT=new Production(new Node("Seleccion_Recursivo"), new Seleccion_Recursivo(a.getIns(), b.getInstructions(), c.getInstructions()));
            RESULT.addSon("¬ø");
            RESULT.addSon(a);
            RESULT.addSon("?");
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon(c);
            :}
| interroganteIzquierdo EXPRESION:a interroganteDerecho entonces INSTRUCCIONES:b {:
            RESULT=new Production(new Node("Seleccion_Recursivo"), new Seleccion_Recursivo(a.getIns(), b.getInstructions()));
            RESULT.addSon("¬ø");
            RESULT.addSon(a);
            RESULT.addSon("?");
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            :}
;

PARA::=
para VARIABLE_CICLO:a asignacionSimbolo VARIABLE_CICLO:b hasta VARIABLE_CICLO:c hacer INSTRUCCIONES:d fin_para {:
            RESULT=new Production(new Node("Para"), new Para(a.getIns(), b.getIns(), c.getIns(), d.getInstructions()));
            RESULT.addSon("para");
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon("hasta");
            RESULT.addSon(c);
            RESULT.addSon("hacer");
            RESULT.addSon(d);
            RESULT.addSon("fin_para");
            :}
| para VARIABLE_CICLO:a asignacionSimbolo VARIABLE_CICLO:b hasta VARIABLE_CICLO:c hacer fin_para {:
            RESULT=new Production(new Node("Para"), new Para(a.getIns(), b.getIns(), c.getIns()));
            RESULT.addSon("para");
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon("hasta");
            RESULT.addSon(c);
            RESULT.addSon("hacer");
            RESULT.addSon("fin_para");
            :}
| para VARIABLE_CICLO:a asignacionSimbolo VARIABLE_CICLO:b hasta VARIABLE_CICLO:c con incremental VARIABLE_CICLO:d hacer INSTRUCCIONES:e fin_para {:
            RESULT=new Production(new Node("Para"), new Para(a.getIns(), b.getIns(), c.getIns(), d.getIns(), e.getInstructions()));
            RESULT.addSon("para");
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon("hasta");
            RESULT.addSon(c);
            RESULT.addSon("con");
            RESULT.addSon("incremental");
            RESULT.addSon(d);
            RESULT.addSon("hacer");
            RESULT.addSon(e);
            RESULT.addSon("fin_para");
            :}
| para VARIABLE_CICLO:a asignacionSimbolo VARIABLE_CICLO:b hasta VARIABLE_CICLO:c con incremental VARIABLE_CICLO:d hacer fin_para {:
            RESULT=new Production(new Node("Para"), new Para(a.getIns(), b.getIns(), c.getIns(), d.getIns()));
            RESULT.addSon("para");
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon("hasta");
            RESULT.addSon(c);
            RESULT.addSon("con");
            RESULT.addSon("incremental");
            RESULT.addSon(d);
            RESULT.addSon("hacer");
            RESULT.addSon("fin_para");
            :}
;

MIENTRAS::=
mientras EXPRESION_RELACIONAL:a hacer INSTRUCCIONES:b fin_mientras {:
            RESULT=new Production(new Node("Mientras"), new Mientras(a.getIns(), b.getInstructions()));
            RESULT.addSon("mientras");
            RESULT.addSon(a);
            RESULT.addSon("hacer");
            RESULT.addSon(b);
            RESULT.addSon("fin_mientras");
            :}
| mientras EXPRESION_RELACIONAL:a hacer fin_mientras {:
            RESULT=new Production(new Node("Mientras"), new Mientras(a.getIns()));
            RESULT.addSon("mientras");
            RESULT.addSon(a);
            RESULT.addSon("hacer");
            RESULT.addSon("fin_mientras");
            :}
;

REPETIR::=
repetir INSTRUCCIONES:a hasta_que EXPRESION_RELACIONAL:b {:
            RESULT=new Production(new Node("Repetir"), new Repetir(a.getInstructions(), b.getIns()));
            RESULT.addSon("repetir");
            RESULT.addSon(a);
            RESULT.addSon("hasta_que");
            RESULT.addSon(b);
            :}
| repetir hasta_que EXPRESION_RELACIONAL:b {:
            RESULT=new Production(new Node("Repetir"), new Repetir(b.getIns()));
            RESULT.addSon("repetir");
            RESULT.addSon("hasta_que");
            RESULT.addSon(b);
            :}
;

RETORNO::=
retornar EXPRESION_RELACIONAL:a puntocoma {:
            RESULT=new Production(new Node("Retorno"), new Retorno(a.getIns()));
            RESULT.addSon("retornar");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
| retornar EXPRESION:a puntocoma {:
            RESULT=new Production(new Node("Retorno"), new Retorno(a.getIns()));
            RESULT.addSon("retornar");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
;

EJECUTAR::=
ejecutar variable:a parAbierto parCerrado puntocoma {:
            RESULT=new Production(new Node("Ejecutar"), new Ejecutar(a.getIns()));
            RESULT.addSon("ejecutar");
            RESULT.addSon(a);
            RESULT.addSon("(");
            RESULT.addSon(")");
            RESULT.addSon(";");
            :}
| ejecutar variable:a parAbierto PARAMETROS_RECURSIVO:b parCerrado puntocoma {:
            RESULT=new Production(new Node("Ejecutar"), new Ejecutar(a.getIns(), b.getIns()));
            RESULT.addSon("ejecutar");
            RESULT.addSon(a);
            RESULT.addSon("(");
            RESULT.addSon(b);
            RESULT.addSon(")");
            RESULT.addSon(";");
            :}
;

METODO::=
metodo variable:a INSTRUCCIONES:b fin_metodo {:
            RESULT=new Production(new Node("Metodo"), new Metodo(a.getIns(), b.getInstructions()));
            RESULT.addSon("metodo");
            RESULT.addSon(a);
            RESULT.addSon(b);
            RESULT.addSon("fin_metodo");
            :}
| metodo variable:a  con_parametros parAbierto PARAMETROS_RECURSIVO:b parCerrado INSTRUCCIONES:c fin_metodo {:
            RESULT=new Production(new Node("Metodo"), new Metodo(a.getIns(), b.getIns(), c.getInstructions()));
            RESULT.addSon("metodo");
            RESULT.addSon(a);
            RESULT.addSon("con_parametros");
            RESULT.addSon("(");
            RESULT.addSon(b);
            RESULT.addSon(")");
            RESULT.addSon(c);
            RESULT.addSon("fin_metodo");
            :}
;

FUNCION::=
funcion variable:a TIPO:c INSTRUCCIONES:b fin_funcion {:
            RESULT=new Production(new Node("Funcion"), new Funcion(a.getIns(), c.getIns(), b.getInstructions()));
            RESULT.addSon("funcion");
            RESULT.addSon(a);
            RESULT.addSon(c);
            RESULT.addSon(b);
            RESULT.addSon("fin_funcion");
            :}
| funcion variable:a TIPO:c con_parametros parAbierto PARAMETROS_RECURSIVO:b parCerrado INSTRUCCIONES:d fin_funcion {:
            RESULT=new Production(new Node("Funcion"), new Funcion(a.getIns(), c.getIns(), b.getIns(), d.getInstructions()));
            RESULT.addSon("funcion");
            RESULT.addSon(a);
            RESULT.addSon(c);
            RESULT.addSon("con_parametros");
            RESULT.addSon("(");
            RESULT.addSon(b);
            RESULT.addSon(")");
            RESULT.addSon(d);
            RESULT.addSon("fin_funcion");
            :}
;

IMPRIMIR::=
imprimir EXPRESION:a puntocoma {:
            RESULT=new Production(new Node("Imprimir"), new Imprimir(a.getIns()));
            RESULT.addSon("imprimir");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
| imprimir valorcadena:a puntocoma {:
            RESULT=new Production(new Node("Imprimir"), new Imprimir(a.getIns()));
            RESULT.addSon("imprimir");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
| imprimir valorcaracter:a puntocoma {:
            RESULT=new Production(new Node("Imprimir"), new Imprimir(a.getIns()));
            RESULT.addSon("imprimir");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
| imprimir caracter_ascii:a puntocoma {:
            RESULT=new Production(new Node("Imprimir"), new Imprimir(a.getIns()));
            RESULT.addSon("imprimir");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
| imprimir_nl EXPRESION:a puntocoma {:
            RESULT=new Production(new Node("Imprimir"), new ImprimirNl(a.getIns(), true));
            RESULT.addSon("imprimir_nl");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
| imprimir_nl valorcadena:a puntocoma {:
            RESULT=new Production(new Node("Imprimir"), new ImprimirNl(a.getIns(), true));
            RESULT.addSon("imprimir_nl");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
| imprimir_nl valorcaracter:a puntocoma {:
            RESULT=new Production(new Node("Imprimir"), new ImprimirNl(a.getIns(), true));
            RESULT.addSon("imprimir_nl");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
| imprimir_nl caracter_ascii:a puntocoma {:
            RESULT=new Production(new Node("Imprimir"), new ImprimirNl(a.getIns(), true));
            RESULT.addSon("imprimir_nl");
            RESULT.addSon(a);
            RESULT.addSon(";");
            :}
;



PARAMETROS_RECURSIVO::=
variable:a TIPO:b coma PARAMETROS_RECURSIVO:c {:
            RESULT=new Production(new Node("Parametros"), new Parametros(a.getIns(), b.getIns(), c.getIns()));
            RESULT.addSon(a);
            RESULT.addSon(b);
            RESULT.addSon(",");
            RESULT.addSon(c);
            :}
| variable:a TIPO:b {:
            RESULT=new Production(new Node("Parametros"), new Parametros(a.getIns(), b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon(b);
            :}
;

TIPO::=
numero {:
            RESULT=new Production(new Node("Tipo");
            RESULT.addSon("numero");
            :}
| caracter {:
            RESULT=new Production(new Node("Tipo");
            RESULT.addSon("caracter");
            :}
| caracter_ascii {:
            RESULT=new Production(new Node("Tipo");
            RESULT.addSon("caracter");
            :}
| booleano {:
            RESULT=new Production(new Node("Tipo");
            RESULT.addSon("boolean");
            :}
| cadena {:
            RESULT=new Production(new Node("Tipo");
            RESULT.addSon("cadena");
            :}
;

LISTAVARIABLES::=
variable:a coma LISTAVARIABLES:b {:
            RESULT=new Production(new Node("ListaVariables"), new ListaVariables(a.getIns(), b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon(",");
            RESULT.addSon(b);
            :}
| variable:c {:
            RESULT=new Production(new Node("ListaVariables"), new ListaVariables(c.getIns()));
            RESULT.addSon(c);
            :}
;


EXPRESION::=
menos EXPRESION:a {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                    RESULT.addSon("-");
                    RESULT.addSon(a);
                    :}
| EXPRESION:a mas EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                    RESULT.addSon(a);
                    RESULT.addSon("+");
                    RESULT.addSon(b);
                    :}
| EXPRESION:a menos EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                    RESULT.addSon(a);
                    RESULT.addSon("-");
                    RESULT.addSon(b);
                    :}
| EXPRESION:a por EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                    RESULT.addSon(a);
                    RESULT.addSon("*");
                    RESULT.addSon(b);
                    :}
| EXPRESION:a dividido EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                    RESULT.addSon(a);
                    RESULT.addSon("/");
                    RESULT.addSon(b);
                    :}
| EXPRESION:a potencia corAbrir EXPRESION:b corCerrar {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.POTENCIA));
                    RESULT.addSon(a);
                    RESULT.addSon("potencia");
                    RESULT.addSon("[");
                    RESULT.addSon(b);
                    RESULT.addSon("]");
                    :}
| EXPRESION:a mod EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MODULO));
                    RESULT.addSon(a);
                    RESULT.addSon("mod");
                    RESULT.addSon(b);
                    :}
| decimal:a {:RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));:}
| entero:a RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
| variable:a {:RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.VARIABLE));:}
| parAbierto EXPRESION:a parCerrado {:RESULT=new Production(new Node("Expresion"), a.getIns());
                    RESULT.addSon("(");
                    RESULT.addSon(a);
                    RESULT.addSon(")");
                    :}
;

VARIABLE_CICLO::=
EXPRESION:a {:
            RESULT=new Production(new Node("VariableCiclo"), new VariableCiclo(a.getIns()));
            RESULT.addSon(a);
            :}
;

EXPRESION_RELACIONAL::=
VARIABLE_RELACIONAL:a VALOR_RACIONAL:c VARIABLE_RELACIONAL:b {:
            RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.c));
            RESULT.addSon(a);
            RESULT.addSon(c);
            RESULT.addSon(b);
            :}
| not EXPRESION_RELACIONAL:a {:
            RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(), Operacion.Tipo_operacion.NOT));
            RESULT.addSon("not");
            RESULT.addSon(a);
            :}
;

VARIABLE_RELACIONAL::=
 EXPRESION:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion((Operacion)a.getIns(), Operacion.Tipo_operacion.VARIABLE));
            RESULT.addSon(a);
            :}
| valorcadena:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a, Operacion.Tipo_operacion.CADENA));
            RESULT.addSon(a);
            :}
| valorcaracter:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a, Operacion.Tipo_operacion.CARACTER));
            RESULT.addSon(a);
            :}
| caracter_ascii:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a, Operacion.Tipo_operacion.CARACTER_ASCII));
            RESULT.addSon(a);
            :}
| verdadero:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a, Operacion.Tipo_operacion.VERDADERO));
            RESULT.addSon(a);
            :}
| falso:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a, Operacion.Tipo_operacion.FALSO));
            RESULT.addSon(a);
            :}
;



VALOR_RACIONAL::=
mayor {:RESULT="mayor";:}
| menor {:RESULT="menor";:}
| mayor_o_igual {:RESULT="mayor_o_igual";:}
| menor_o_igual {:RESULT="menor_o_igual";:}
| es_igual {:RESULT="es_igual";:}
| es_diferente {:RESULT="es_diferente";:}
| or {:RESULT="or";:}
| and {:RESULT="and";:}
| not; {:RESULT="not";:}