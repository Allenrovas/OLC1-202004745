
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import analizadores.*;
import java.util.ArrayList;
import principal.*;
import java.util.LinkedList;
import Structures.Node;
import Structures.Arbol;
import Structures.Production;
import Structures.Instructions.Operacion;
import Structures.Instructions.Declaracion;
import Structures.Instructions.Instruccion;
import Structures.Instructions.Asignacion;
import Structures.Instructions.Condicional;
import Structures.Instructions.Seleccion;
import Structures.Instructions.Para;
import Structures.Instructions.Parametros;
import Structures.Instructions.Mientras;
import Structures.Instructions.Repetir;
import Structures.Instructions.Retorno;
import Structures.Instructions.Metodo;
import Structures.Instructions.Funcion;
import Structures.Instructions.Ejecutar;
import Structures.Instructions.ComentarioMl;
import Structures.Instructions.Comentario;
import Structures.Instructions.ImprimirNl;
import Structures.Instructions.Imprimir;
import Structures.Instructions.Error;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\004\011\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\003\000\002\004\003" +
    "\000\002\004\007\000\002\004\011\000\002\004\012\000" +
    "\002\004\010\000\002\004\012\000\002\004\007\000\002" +
    "\004\013\000\002\004\012\000\002\004\016\000\002\004" +
    "\015\000\002\004\007\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\004\005\000\002\004\007\000" +
    "\002\004\010\000\002\004\006\000\002\004\012\000\002" +
    "\004\007\000\002\004\013\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\006\007\000\002\006\006\000\002" +
    "\007\010\000\002\007\007\000\002\012\006\000\002\012" +
    "\004\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\010\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\007\000\002\010\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\036\005\001\002\000\004\002\341\001" +
    "\002\000\042\003\023\012\025\013\007\014\024\040\020" +
    "\043\026\047\017\052\011\057\016\062\013\064\021\065" +
    "\006\070\027\072\022\073\014\074\012\001\002\000\004" +
    "\014\330\001\002\000\070\003\uffef\012\uffef\013\uffef\014" +
    "\uffef\037\uffef\040\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\051\uffef\052\uffef\054\uffef\057\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\065\uffef\066\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\104\uffef\001\002\000\070\003" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\037\ufffe\040\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\051\ufffe\052\ufffe\054" +
    "\ufffe\057\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\104" +
    "\ufffe\001\002\000\026\004\063\005\062\006\060\007\066" +
    "\014\057\017\064\076\054\077\065\106\067\110\061\001" +
    "\002\000\022\006\060\007\066\014\057\017\064\076\300" +
    "\077\302\106\067\110\301\001\002\000\044\003\023\012" +
    "\025\013\007\014\024\040\020\043\026\047\017\052\011" +
    "\057\016\062\013\063\274\064\021\065\006\070\027\072" +
    "\022\073\014\074\012\001\002\000\022\006\060\007\066" +
    "\014\057\017\064\076\263\077\265\106\067\110\264\001" +
    "\002\000\044\003\023\012\025\013\007\014\024\037\262" +
    "\040\020\043\026\047\017\052\011\057\016\062\013\064" +
    "\021\065\006\070\027\072\022\073\014\074\012\001\002" +
    "\000\030\004\063\005\062\006\060\007\066\014\057\017" +
    "\064\035\055\076\054\077\065\106\067\110\061\001\002" +
    "\000\014\006\060\007\066\014\057\017\064\106\067\001" +
    "\002\000\004\014\207\001\002\000\014\006\060\007\066" +
    "\014\057\017\064\106\067\001\002\000\004\014\176\001" +
    "\002\000\070\003\uffd1\012\uffd1\013\uffd1\014\uffd1\037\uffd1" +
    "\040\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\051" +
    "\uffd1\052\uffd1\054\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\065\uffd1\066\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\104\uffd1\001\002\000\004\015\161\001\002" +
    "\000\070\003\ufff0\012\ufff0\013\ufff0\014\ufff0\037\ufff0\040" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0" +
    "\052\ufff0\054\ufff0\057\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\065\ufff0\066\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\104\ufff0\001\002\000\030\004\063\005\062\006" +
    "\060\007\066\014\057\017\064\035\055\076\054\077\065" +
    "\106\067\110\061\001\002\000\004\014\030\001\002\000" +
    "\014\010\033\011\036\023\032\075\031\110\034\001\002" +
    "\000\050\003\uffca\012\uffca\013\uffca\014\uffca\040\uffca\043" +
    "\uffca\047\uffca\052\uffca\057\uffca\062\uffca\064\uffca\065\uffca" +
    "\067\uffca\070\uffca\072\uffca\073\uffca\074\uffca\101\uffca\107" +
    "\uffca\001\002\000\050\003\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\040\uffc7\043\uffc7\047\uffc7\052\uffc7\057\uffc7\062\uffc7\064" +
    "\uffc7\065\uffc7\067\uffc7\070\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\101\uffc7\107\uffc7\001\002\000\050\003\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\040\uffc6\043\uffc6\047\uffc6\052\uffc6\057\uffc6" +
    "\062\uffc6\064\uffc6\065\uffc6\067\uffc6\070\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\101\uffc6\107\uffc6\001\002\000\050\003\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\040\uffc8\043\uffc8\047\uffc8\052" +
    "\uffc8\057\uffc8\062\uffc8\064\uffc8\065\uffc8\067\uffc8\070\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\101\uffc8\107\uffc8\001\002\000" +
    "\044\003\023\012\025\013\007\014\024\040\020\043\026" +
    "\047\017\052\011\057\016\062\013\064\021\065\006\067" +
    "\037\070\027\072\022\073\014\074\012\001\002\000\050" +
    "\003\uffc9\012\uffc9\013\uffc9\014\uffc9\040\uffc9\043\uffc9\047" +
    "\uffc9\052\uffc9\057\uffc9\062\uffc9\064\uffc9\065\uffc9\067\uffc9" +
    "\070\uffc9\072\uffc9\073\uffc9\074\uffc9\101\uffc9\107\uffc9\001" +
    "\002\000\004\106\043\001\002\000\044\003\023\012\025" +
    "\013\007\014\024\040\020\043\026\047\017\052\011\057" +
    "\016\062\013\064\021\065\006\070\027\071\042\072\022" +
    "\073\014\074\012\001\002\000\070\003\uffff\012\uffff\013" +
    "\uffff\014\uffff\037\uffff\040\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\051\uffff\052\uffff\054\uffff\057\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\070\uffff" +
    "\071\uffff\072\uffff\073\uffff\074\uffff\104\uffff\001\002\000" +
    "\070\003\uffdb\012\uffdb\013\uffdb\014\uffdb\037\uffdb\040\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052" +
    "\uffdb\054\uffdb\057\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\104\uffdb\001\002\000\004\014\044\001\002\000\014" +
    "\010\033\011\036\023\032\075\031\110\034\001\002\000" +
    "\004\107\046\001\002\000\042\003\023\012\025\013\007" +
    "\014\024\040\020\043\026\047\017\052\011\057\016\062" +
    "\013\064\021\065\006\070\027\072\022\073\014\074\012" +
    "\001\002\000\044\003\023\012\025\013\007\014\024\040" +
    "\020\043\026\047\017\052\011\057\016\062\013\064\021" +
    "\065\006\070\027\071\050\072\022\073\014\074\012\001" +
    "\002\000\070\003\uffda\012\uffda\013\uffda\014\uffda\037\uffda" +
    "\040\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\051" +
    "\uffda\052\uffda\054\uffda\057\uffda\061\uffda\062\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\104\uffda\001\002\000\006\101\052\107\uffcb" +
    "\001\002\000\004\014\044\001\002\000\004\107\uffcc\001" +
    "\002\000\130\003\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\037\uffaf\040\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\066\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\100\uffaf\104\uffaf\107\uffaf\001\002" +
    "\000\030\004\063\005\062\006\060\007\066\014\057\017" +
    "\064\035\055\076\054\077\065\106\067\110\061\001\002" +
    "\000\024\025\146\026\143\027\144\030\136\031\140\032" +
    "\145\033\141\034\142\035\137\001\002\000\150\003\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\037" +
    "\uffbc\040\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\100" +
    "\uffbc\102\uffbc\104\uffbc\105\uffbc\107\uffbc\001\002\000\150" +
    "\003\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\037\uffbe\040\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074" +
    "\uffbe\100\uffbe\102\uffbe\104\uffbe\105\uffbe\107\uffbe\001\002" +
    "\000\130\003\uffad\012\uffad\013\uffad\014\uffad\015\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\037\uffad\040\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063" +
    "\uffad\064\uffad\065\uffad\066\uffad\070\uffad\071\uffad\072\uffad" +
    "\073\uffad\074\uffad\100\uffad\104\uffad\107\uffad\001\002\000" +
    "\130\003\uffab\012\uffab\013\uffab\014\uffab\015\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\037\uffab\040\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\100\uffab\104\uffab\107\uffab\001\002\000\130" +
    "\003\uffac\012\uffac\013\uffac\014\uffac\015\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\037\uffac\040\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064" +
    "\uffac\065\uffac\066\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\100\uffac\104\uffac\107\uffac\001\002\000\014\006" +
    "\060\007\066\014\057\017\064\106\067\001\002\000\130" +
    "\003\uffae\012\uffae\013\uffae\014\uffae\015\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\037\uffae\040\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064" +
    "\uffae\065\uffae\066\uffae\070\uffae\071\uffae\072\uffae\073\uffae" +
    "\074\uffae\100\uffae\104\uffae\107\uffae\001\002\000\150\003" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\037\uffbd\040\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\066\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd" +
    "\100\uffbd\102\uffbd\104\uffbd\105\uffbd\107\uffbd\001\002\000" +
    "\014\006\060\007\066\014\057\017\064\106\067\001\002" +
    "\000\144\003\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\117\017\120\020\121\021\115\022\122\024\116\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\037\uffb0\040\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\070\uffb0\071\uffb0\072\uffb0\073" +
    "\uffb0\074\uffb0\100\uffb0\104\uffb0\107\uffb0\001\002\000\004" +
    "\050\072\001\002\000\042\003\023\012\025\013\007\014" +
    "\024\040\020\043\026\047\017\052\011\057\016\062\013" +
    "\064\021\065\006\070\027\072\022\073\014\074\012\001" +
    "\002\000\050\003\023\012\025\013\007\014\024\040\020" +
    "\043\026\044\074\045\076\046\077\047\017\052\011\057" +
    "\016\062\013\064\021\065\006\070\027\072\022\073\014" +
    "\074\012\001\002\000\070\003\uffee\012\uffee\013\uffee\014" +
    "\uffee\037\uffee\040\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\051\uffee\052\uffee\054\uffee\057\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\065\uffee\066\uffee\070\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\104\uffee\001\002\000\010\044" +
    "\107\045\105\046\106\001\002\000\042\003\023\012\025" +
    "\013\007\014\024\040\020\043\026\047\017\052\011\057" +
    "\016\062\013\064\021\065\006\070\027\072\022\073\014" +
    "\074\012\001\002\000\030\004\063\005\062\006\060\007" +
    "\066\014\057\017\064\035\055\076\054\077\065\106\067" +
    "\110\061\001\002\000\004\050\101\001\002\000\042\003" +
    "\023\012\025\013\007\014\024\040\020\043\026\047\017" +
    "\052\011\057\016\062\013\064\021\065\006\070\027\072" +
    "\022\073\014\074\012\001\002\000\050\003\023\012\025" +
    "\013\007\014\024\040\020\043\026\044\uffcf\045\uffcf\046" +
    "\uffcf\047\017\052\011\057\016\062\013\064\021\065\006" +
    "\070\027\072\022\073\014\074\012\001\002\000\044\003" +
    "\023\012\025\013\007\014\024\040\020\043\026\044\104" +
    "\047\017\052\011\057\016\062\013\064\021\065\006\070" +
    "\027\072\022\073\014\074\012\001\002\000\070\003\uffed" +
    "\012\uffed\013\uffed\014\uffed\037\uffed\040\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\051\uffed\052\uffed\054\uffed" +
    "\057\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066" +
    "\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed\104\uffed" +
    "\001\002\000\042\003\023\012\025\013\007\014\024\040" +
    "\020\043\026\047\017\052\011\057\016\062\013\064\021" +
    "\065\006\070\027\072\022\073\014\074\012\001\002\000" +
    "\030\004\063\005\062\006\060\007\066\014\057\017\064" +
    "\035\055\076\054\077\065\106\067\110\061\001\002\000" +
    "\070\003\uffeb\012\uffeb\013\uffeb\014\uffeb\037\uffeb\040\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\051\uffeb\052" +
    "\uffeb\054\uffeb\057\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\104\uffeb\001\002\000\004\050\111\001\002\000\042" +
    "\003\023\012\025\013\007\014\024\040\020\043\026\047" +
    "\017\052\011\057\016\062\013\064\021\065\006\070\027" +
    "\072\022\073\014\074\012\001\002\000\050\003\023\012" +
    "\025\013\007\014\024\040\020\043\026\044\uffd0\045\uffd0" +
    "\046\uffd0\047\017\052\011\057\016\062\013\064\021\065" +
    "\006\070\027\072\022\073\014\074\012\001\002\000\044" +
    "\003\023\012\025\013\007\014\024\040\020\043\026\044" +
    "\114\047\017\052\011\057\016\062\013\064\021\065\006" +
    "\070\027\072\022\073\014\074\012\001\002\000\070\003" +
    "\uffec\012\uffec\013\uffec\014\uffec\037\uffec\040\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\051\uffec\052\uffec\054" +
    "\uffec\057\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec" +
    "\066\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\104" +
    "\uffec\001\002\000\014\006\060\007\066\014\057\017\064" +
    "\106\067\001\002\000\014\006\060\007\066\014\057\017" +
    "\064\106\067\001\002\000\014\006\060\007\066\014\057" +
    "\017\064\106\067\001\002\000\014\006\060\007\066\014" +
    "\057\017\064\106\067\001\002\000\004\103\124\001\002" +
    "\000\014\006\060\007\066\014\057\017\064\106\067\001" +
    "\002\000\150\003\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\121\021\uffc1\022\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\037\uffc1\040\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\070\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\074\uffc1\100\uffc1\102\uffc1\104\uffc1\105\uffc1\107" +
    "\uffc1\001\002\000\014\006\060\007\066\014\057\017\064" +
    "\106\067\001\002\000\020\016\117\017\120\020\121\021" +
    "\115\022\122\024\116\102\126\001\002\000\150\003\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\037" +
    "\uffc0\040\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\100" +
    "\uffc0\102\uffc0\104\uffc0\105\uffc0\107\uffc0\001\002\000\150" +
    "\003\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\121\021\115\022\122\024\116\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\037\uffc3\040\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\100\uffc3\102\uffc3\104\uffc3\105\uffc3\107\uffc3\001\002" +
    "\000\150\003\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\121\021\115\022\122\024\116\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\037\uffc4\040\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\070\uffc4\071\uffc4\072\uffc4\073" +
    "\uffc4\074\uffc4\100\uffc4\102\uffc4\104\uffc4\105\uffc4\107\uffc4" +
    "\001\002\000\150\003\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\121\021\uffbf\022\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\100\uffbf\102\uffbf\104\uffbf\105\uffbf" +
    "\107\uffbf\001\002\000\150\003\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\121\021\uffc2\022\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\040\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\100\uffc2\102\uffc2\104\uffc2" +
    "\105\uffc2\107\uffc2\001\002\000\020\016\117\017\120\020" +
    "\121\021\115\022\122\024\116\107\134\001\002\000\150" +
    "\003\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\037\uffbb\040\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\100\uffbb\102\uffbb\104\uffbb\105\uffbb\107\uffbb\001\002" +
    "\000\150\003\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\121\021\115\022\122\024\116\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\037\uffc5\040\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\070\uffc5\071\uffc5\072\uffc5\073" +
    "\uffc5\074\uffc5\100\uffc5\102\uffc5\104\uffc5\105\uffc5\107\uffc5" +
    "\001\002\000\026\004\063\005\062\006\060\007\066\014" +
    "\057\017\064\076\054\077\065\106\067\110\061\001\002" +
    "\000\026\004\063\005\062\006\060\007\066\014\057\017" +
    "\064\076\054\077\065\106\067\110\061\001\002\000\026" +
    "\004\063\005\062\006\060\007\066\014\057\017\064\076" +
    "\054\077\065\106\067\110\061\001\002\000\026\004\063" +
    "\005\062\006\060\007\066\014\057\017\064\076\054\077" +
    "\065\106\067\110\061\001\002\000\026\004\063\005\062" +
    "\006\060\007\066\014\057\017\064\076\054\077\065\106" +
    "\067\110\061\001\002\000\026\004\063\005\062\006\060" +
    "\007\066\014\057\017\064\076\054\077\065\106\067\110" +
    "\061\001\002\000\026\004\063\005\062\006\060\007\066" +
    "\014\057\017\064\076\054\077\065\106\067\110\061\001" +
    "\002\000\026\004\063\005\062\006\060\007\066\014\057" +
    "\017\064\076\054\077\065\106\067\110\061\001\002\000" +
    "\026\004\063\005\062\006\060\007\066\014\057\017\064" +
    "\076\054\077\065\106\067\110\061\001\002\000\076\003" +
    "\uffba\012\uffba\013\uffba\014\uffba\037\uffba\040\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\054\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\065\uffba\066\uffba\070\uffba\071\uffba\072\uffba\073" +
    "\uffba\074\uffba\100\uffba\104\uffba\001\002\000\076\003\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\037\uffb5\040\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\054\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5" +
    "\074\uffb5\100\uffb5\104\uffb5\001\002\000\076\003\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\037\uffb8\040\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074" +
    "\uffb8\100\uffb8\104\uffb8\001\002\000\076\003\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\037\uffb9\040\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\100\uffb9\104\uffb9\001\002\000\076\003\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\037\uffb7\040\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\100" +
    "\uffb7\104\uffb7\001\002\000\076\003\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\037\uffb4\040\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\057\uffb4" +
    "\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066" +
    "\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\100\uffb4" +
    "\104\uffb4\001\002\000\076\003\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\037\uffb6\040\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\100\uffb6\104" +
    "\uffb6\001\002\000\076\003\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\037\uffb3\040\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\054\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\070" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\100\uffb3\104\uffb3" +
    "\001\002\000\076\003\uffb2\012\uffb2\013\uffb2\014\uffb2\037" +
    "\uffb2\040\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\054\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\070\uffb2" +
    "\071\uffb2\072\uffb2\073\uffb2\074\uffb2\100\uffb2\104\uffb2\001" +
    "\002\000\076\003\uffb1\012\uffb1\013\uffb1\014\uffb1\037\uffb1" +
    "\040\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\054\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\070\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\074\uffb1\100\uffb1\104\uffb1\001\002" +
    "\000\026\004\163\005\164\006\060\007\066\014\057\017" +
    "\064\076\162\077\166\106\067\110\165\001\002\000\004" +
    "\100\175\001\002\000\004\100\174\001\002\000\004\100" +
    "\173\001\002\000\004\100\172\001\002\000\004\100\171" +
    "\001\002\000\020\016\117\017\120\020\121\021\115\022" +
    "\122\024\116\100\170\001\002\000\070\003\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\037\ufff6\040\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\051\ufff6\052\ufff6\054\ufff6\057\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\104\ufff6\001\002" +
    "\000\070\003\ufff4\012\ufff4\013\ufff4\014\ufff4\037\ufff4\040" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4" +
    "\052\ufff4\054\ufff4\057\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\104\ufff4\001\002\000\070\003\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\037\ufff3\040\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\051\ufff3\052\ufff3\054\ufff3\057\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\070\ufff3" +
    "\071\ufff3\072\ufff3\073\ufff3\074\ufff3\104\ufff3\001\002\000" +
    "\070\003\ufff1\012\ufff1\013\ufff1\014\ufff1\037\ufff1\040\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052" +
    "\ufff1\054\ufff1\057\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\104\ufff1\001\002\000\070\003\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\037\ufff2\040\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\051\ufff2\052\ufff2\054\ufff2\057\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\104\ufff2\001\002\000\070" +
    "\003\ufff5\012\ufff5\013\ufff5\014\ufff5\037\ufff5\040\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5\052\ufff5" +
    "\054\ufff5\057\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065" +
    "\ufff5\066\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5" +
    "\104\ufff5\001\002\000\004\106\177\001\002\000\030\004" +
    "\063\005\062\006\060\007\066\014\057\017\064\076\054" +
    "\077\065\106\067\107\201\110\061\001\002\000\004\107" +
    "\203\001\002\000\004\100\202\001\002\000\070\003\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\037\uffdf\040\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\054\uffdf" +
    "\057\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\104\uffdf" +
    "\001\002\000\004\100\204\001\002\000\070\003\uffde\012" +
    "\uffde\013\uffde\014\uffde\037\uffde\040\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde\054\uffde\057" +
    "\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde" +
    "\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\104\uffde\001" +
    "\002\000\020\016\117\017\120\020\121\021\115\022\122" +
    "\024\116\100\206\001\002\000\070\003\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\037\uffe0\040\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\051\uffe0\052\uffe0\054\uffe0\057\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\073\uffe0\074\uffe0\104\uffe0\001\002\000" +
    "\004\041\210\001\002\000\012\010\213\011\214\023\212" +
    "\075\211\001\002\000\004\042\234\001\002\000\004\042" +
    "\225\001\002\000\004\042\222\001\002\000\004\042\215" +
    "\001\002\000\006\077\216\110\217\001\002\000\004\100" +
    "\221\001\002\000\004\100\220\001\002\000\070\003\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\037\ufffa\040\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\052\ufffa\054\ufffa" +
    "\057\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\104\ufffa" +
    "\001\002\000\070\003\ufffb\012\ufffb\013\ufffb\014\ufffb\037" +
    "\ufffb\040\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\051\ufffb\052\ufffb\054\ufffb\057\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\070\ufffb\071\ufffb\072\ufffb" +
    "\073\ufffb\074\ufffb\104\ufffb\001\002\000\004\076\223\001" +
    "\002\000\004\100\224\001\002\000\070\003\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\037\ufffc\040\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\051\ufffc\052\ufffc\054\ufffc\057\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\070" +
    "\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\104\ufffc\001\002" +
    "\000\030\004\227\005\226\006\060\007\066\014\057\017" +
    "\064\035\055\076\054\077\065\106\067\110\061\001\002" +
    "\000\026\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\100\233\001\002\000\026" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\100\232\001\002\000\004\100\231" +
    "\001\002\000\070\003\ufff7\012\ufff7\013\ufff7\014\ufff7\037" +
    "\ufff7\040\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\051\ufff7\052\ufff7\054\ufff7\057\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\065\ufff7\066\ufff7\070\ufff7\071\ufff7\072\ufff7" +
    "\073\ufff7\074\ufff7\104\ufff7\001\002\000\070\003\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\037\ufff9\040\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\051\ufff9\052\ufff9\054\ufff9\057" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\104\ufff9\001" +
    "\002\000\070\003\ufff8\012\ufff8\013\ufff8\014\ufff8\037\ufff8" +
    "\040\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\051" +
    "\ufff8\052\ufff8\054\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\104\ufff8\001\002\000\014\006\060\007\066" +
    "\014\057\017\064\106\067\001\002\000\020\016\117\017" +
    "\120\020\121\021\115\022\122\024\116\100\236\001\002" +
    "\000\070\003\ufffd\012\ufffd\013\ufffd\014\ufffd\037\ufffd\040" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\051\ufffd" +
    "\052\ufffd\054\ufffd\057\ufffd\061\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd" +
    "\074\ufffd\104\ufffd\001\002\000\020\016\117\017\120\020" +
    "\121\021\115\022\122\024\116\060\240\001\002\000\004" +
    "\104\242\001\002\000\006\045\250\051\251\001\002\000" +
    "\014\006\060\007\066\014\057\017\064\106\067\001\002" +
    "\000\020\016\117\017\120\020\121\021\115\022\122\024" +
    "\116\105\244\001\002\000\004\050\245\001\002\000\042" +
    "\003\023\012\025\013\007\014\024\040\020\043\026\047" +
    "\017\052\011\057\016\062\013\064\021\065\006\070\027" +
    "\072\022\073\014\074\012\001\002\000\050\003\023\012" +
    "\025\013\007\014\024\040\020\043\026\045\uffcd\047\017" +
    "\051\uffcd\052\011\057\016\062\013\064\021\065\006\070" +
    "\027\072\022\073\014\074\012\104\242\001\002\000\006" +
    "\045\uffce\051\uffce\001\002\000\004\050\252\001\002\000" +
    "\070\003\uffe9\012\uffe9\013\uffe9\014\uffe9\037\uffe9\040\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9\052" +
    "\uffe9\054\uffe9\057\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074" +
    "\uffe9\104\uffe9\001\002\000\042\003\023\012\025\013\007" +
    "\014\024\040\020\043\026\047\017\052\011\057\016\062" +
    "\013\064\021\065\006\070\027\072\022\073\014\074\012" +
    "\001\002\000\044\003\023\012\025\013\007\014\024\040" +
    "\020\043\026\047\017\051\254\052\011\057\016\062\013" +
    "\064\021\065\006\070\027\072\022\073\014\074\012\001" +
    "\002\000\070\003\uffea\012\uffea\013\uffea\014\uffea\037\uffea" +
    "\040\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\051" +
    "\uffea\052\uffea\054\uffea\057\uffea\061\uffea\062\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\070\uffea\071\uffea\072\uffea\073" +
    "\uffea\074\uffea\104\uffea\001\002\000\004\060\256\001\002" +
    "\000\044\003\023\012\025\013\007\014\024\040\020\043" +
    "\026\047\017\052\011\057\016\061\257\062\013\064\021" +
    "\065\006\070\027\072\022\073\014\074\012\001\002\000" +
    "\070\003\uffe3\012\uffe3\013\uffe3\014\uffe3\037\uffe3\040\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052" +
    "\uffe3\054\uffe3\057\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\104\uffe3\001\002\000\044\003\023\012\025\013\007" +
    "\014\024\040\020\043\026\047\017\052\011\057\016\061" +
    "\261\062\013\064\021\065\006\070\027\072\022\073\014" +
    "\074\012\001\002\000\070\003\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\037\uffe4\040\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\051\uffe4\052\uffe4\054\uffe4\057\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\070\uffe4\071\uffe4" +
    "\072\uffe4\073\uffe4\074\uffe4\104\uffe4\001\002\000\004\002" +
    "\000\001\002\000\004\100\272\001\002\000\004\100\271" +
    "\001\002\000\004\100\270\001\002\000\020\016\117\017" +
    "\120\020\121\021\115\022\122\024\116\100\267\001\002" +
    "\000\070\003\uffd9\012\uffd9\013\uffd9\014\uffd9\037\uffd9\040" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\051\uffd9" +
    "\052\uffd9\054\uffd9\057\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9" +
    "\074\uffd9\104\uffd9\001\002\000\070\003\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\037\uffd7\040\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\051\uffd7\052\uffd7\054\uffd7\057\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\070\uffd7" +
    "\071\uffd7\072\uffd7\073\uffd7\074\uffd7\104\uffd7\001\002\000" +
    "\070\003\uffd6\012\uffd6\013\uffd6\014\uffd6\037\uffd6\040\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6\052" +
    "\uffd6\054\uffd6\057\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074" +
    "\uffd6\104\uffd6\001\002\000\070\003\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\037\uffd8\040\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\051\uffd8\052\uffd8\054\uffd8\057\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\104\uffd8\001\002\000\044" +
    "\003\023\012\025\013\007\014\024\040\020\043\026\047" +
    "\017\052\011\057\016\062\013\063\276\064\021\065\006" +
    "\070\027\072\022\073\014\074\012\001\002\000\030\004" +
    "\063\005\062\006\060\007\066\014\057\017\064\035\055" +
    "\076\054\077\065\106\067\110\061\001\002\000\070\003" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\037\uffe1\040\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\054" +
    "\uffe1\057\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\104" +
    "\uffe1\001\002\000\030\004\063\005\062\006\060\007\066" +
    "\014\057\017\064\035\055\076\054\077\065\106\067\110" +
    "\061\001\002\000\070\003\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\037\uffe2\040\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\051\uffe2\052\uffe2\054\uffe2\057\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\064\uffe2\065\uffe2\066\uffe2\070\uffe2\071\uffe2\072" +
    "\uffe2\073\uffe2\074\uffe2\104\uffe2\001\002\000\004\100\307" +
    "\001\002\000\004\100\306\001\002\000\004\100\305\001" +
    "\002\000\020\016\117\017\120\020\121\021\115\022\122" +
    "\024\116\100\304\001\002\000\070\003\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\037\uffd5\040\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\051\uffd5\052\uffd5\054\uffd5\057\uffd5\061" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\104\uffd5\001\002\000" +
    "\070\003\uffd3\012\uffd3\013\uffd3\014\uffd3\037\uffd3\040\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052" +
    "\uffd3\054\uffd3\057\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\104\uffd3\001\002\000\070\003\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\037\uffd2\040\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\051\uffd2\052\uffd2\054\uffd2\057\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\104\uffd2\001\002\000\070" +
    "\003\uffd4\012\uffd4\013\uffd4\014\uffd4\037\uffd4\040\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4" +
    "\054\uffd4\057\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\104\uffd4\001\002\000\004\015\311\001\002\000\026\004" +
    "\063\005\062\006\060\007\066\014\057\017\064\076\054" +
    "\077\065\106\067\110\061\001\002\000\004\053\313\001" +
    "\002\000\026\004\063\005\062\006\060\007\066\014\057" +
    "\017\064\076\054\077\065\106\067\110\061\001\002\000" +
    "\006\055\315\060\316\001\002\000\004\056\322\001\002" +
    "\000\044\003\023\012\025\013\007\014\024\040\020\043" +
    "\026\047\017\052\011\054\320\057\016\062\013\064\021" +
    "\065\006\070\027\072\022\073\014\074\012\001\002\000" +
    "\044\003\023\012\025\013\007\014\024\040\020\043\026" +
    "\047\017\052\011\054\321\057\016\062\013\064\021\065" +
    "\006\070\027\072\022\073\014\074\012\001\002\000\070" +
    "\003\uffe7\012\uffe7\013\uffe7\014\uffe7\037\uffe7\040\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7" +
    "\054\uffe7\057\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\066\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\104\uffe7\001\002\000\070\003\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\037\uffe8\040\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\051\uffe8\052\uffe8\054\uffe8\057\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\070\uffe8\071\uffe8" +
    "\072\uffe8\073\uffe8\074\uffe8\104\uffe8\001\002\000\026\004" +
    "\063\005\062\006\060\007\066\014\057\017\064\076\054" +
    "\077\065\106\067\110\061\001\002\000\004\060\324\001" +
    "\002\000\044\003\023\012\025\013\007\014\024\040\020" +
    "\043\026\047\017\052\011\054\326\057\016\062\013\064" +
    "\021\065\006\070\027\072\022\073\014\074\012\001\002" +
    "\000\044\003\023\012\025\013\007\014\024\040\020\043" +
    "\026\047\017\052\011\054\327\057\016\062\013\064\021" +
    "\065\006\070\027\072\022\073\014\074\012\001\002\000" +
    "\070\003\uffe5\012\uffe5\013\uffe5\014\uffe5\037\uffe5\040\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052" +
    "\uffe5\054\uffe5\057\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074" +
    "\uffe5\104\uffe5\001\002\000\070\003\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\037\uffe6\040\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\051\uffe6\052\uffe6\054\uffe6\057\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\070\uffe6\071" +
    "\uffe6\072\uffe6\073\uffe6\074\uffe6\104\uffe6\001\002\000\044" +
    "\003\023\012\025\013\007\014\024\040\020\043\026\047" +
    "\017\052\011\057\016\062\013\064\021\065\006\067\331" +
    "\070\027\072\022\073\014\074\012\001\002\000\004\106" +
    "\334\001\002\000\044\003\023\012\025\013\007\014\024" +
    "\040\020\043\026\047\017\052\011\057\016\062\013\064" +
    "\021\065\006\066\333\070\027\072\022\073\014\074\012" +
    "\001\002\000\070\003\uffdd\012\uffdd\013\uffdd\014\uffdd\037" +
    "\uffdd\040\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\051\uffdd\052\uffdd\054\uffdd\057\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\104\uffdd\001\002\000\004\014\044\001" +
    "\002\000\004\107\336\001\002\000\042\003\023\012\025" +
    "\013\007\014\024\040\020\043\026\047\017\052\011\057" +
    "\016\062\013\064\021\065\006\070\027\072\022\073\014" +
    "\074\012\001\002\000\044\003\023\012\025\013\007\014" +
    "\024\040\020\043\026\047\017\052\011\057\016\062\013" +
    "\064\021\065\006\066\340\070\027\072\022\073\014\074" +
    "\012\001\002\000\070\003\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\037\uffdc\040\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\051\uffdc\052\uffdc\054\uffdc\057\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\073\uffdc\074\uffdc\104\uffdc\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\014\004\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\307\010\067\001" +
    "\001\000\004\010\302\001\001\000\006\003\272\004\007" +
    "\001\001\000\004\010\265\001\001\000\004\004\040\001" +
    "\001\000\010\005\055\010\067\011\254\001\001\000\004" +
    "\010\236\001\001\000\002\001\001\000\004\010\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\055\010\067\011\070\001" +
    "\001\000\002\001\001\000\004\013\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\037\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\044\001\001\000\004" +
    "\013\050\001\001\000\002\001\001\000\006\003\046\004" +
    "\007\001\001\000\004\004\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\055\010\067\011\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\072\004\007\001\001\000\006\004" +
    "\040\006\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\102\004\007\001\001\000\010\005\055\010" +
    "\067\011\077\001\001\000\002\001\001\000\006\003\101" +
    "\004\007\001\001\000\004\004\040\001\001\000\004\004" +
    "\040\001\001\000\002\001\001\000\006\003\112\004\007" +
    "\001\001\000\010\005\055\010\067\011\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\111\004\007" +
    "\001\001\000\004\004\040\001\001\000\004\004\040\001" +
    "\001\000\002\001\001\000\004\010\131\001\001\000\004" +
    "\010\130\001\001\000\004\010\127\001\001\000\004\010" +
    "\126\001\001\000\002\001\001\000\004\010\122\001\001" +
    "\000\002\001\001\000\004\010\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\156\010\067" +
    "\001\001\000\006\005\155\010\067\001\001\000\006\005" +
    "\154\010\067\001\001\000\006\005\153\010\067\001\001" +
    "\000\006\005\152\010\067\001\001\000\006\005\151\010" +
    "\067\001\001\000\006\005\150\010\067\001\001\000\006" +
    "\005\147\010\067\001\001\000\006\005\146\010\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\177\010" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\055" +
    "\010\067\011\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\240" +
    "\001\001\000\002\001\001\000\004\010\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\245\004\007" +
    "\001\001\000\006\004\040\007\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\252" +
    "\004\007\001\001\000\004\004\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\257\004\007\001\001" +
    "\000\002\001\001\000\004\004\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\040\001\001\000\010\005\055\010\067\011\274\001" +
    "\001\000\002\001\001\000\010\005\055\010\067\011\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\311\010\067\001\001\000\002" +
    "\001\001\000\006\005\313\010\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\316\004\007\001\001" +
    "\000\004\004\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\322\010\067\001\001\000\002\001\001" +
    "\000\006\003\324\004\007\001\001\000\004\004\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\331" +
    "\004\007\001\001\000\002\001\001\000\004\004\040\001" +
    "\001\000\002\001\001\000\004\012\334\001\001\000\002" +
    "\001\001\000\006\003\336\004\007\001\001\000\004\004" +
    "\040\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    // error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

         ArrayList<String> errores = new ArrayList<String>();
            errores.add(lexema);
            errores.add(String.valueOf(fila));
            errores.add(String.valueOf(columna));
            Main.errores.add(errores);
        System.out.println("=======Error Sintactico Recuperado========");


    }

    //momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("=======ErrorIrrecuperable=========");

    }

    public Arbol getArbol()
    {
        return arbol;
    }
    public LinkedList<Instruccion> getAST()
    {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= inicio INSTRUCCIONES fin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    //se guarda el AST, que es la lista principal de instrucciones en la variable
                                                    //AST que se definió dentro del parser
                                                    parser.AST=a.getInstructions();
                                                    Node NODERAIZ = new Node("INIT"); NODERAIZ.addSon(a.getNode());
                                                    parser.arbol=new Arbol(NODERAIZ);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Production(new Node("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= ingresar variable como numero con_valor EXPRESION puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), (Operacion) b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("numero");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ingresar variable como cadena con_valor valorcadena puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.CADENA)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("cadena");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ingresar variable como caracter con_valor valorcaracter puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.CARACTER)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("caracter");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= ingresar variable como caracter con_valor caracter_ascii puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.CARACTER_ASCII)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("caracter");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ingresar variable como booleano con_valor verdadero puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.VERDADERO)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("boolean");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ingresar variable como booleano con_valor falso puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.FALSO)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("boolean");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= ingresar variable como booleano con_valor EXPRESION_RELACIONAL puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), (Operacion)b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("boolean");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= variable asignacionSimbolo EXPRESION puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), (Operacion) b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= variable asignacionSimbolo valorcadena puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.CADENA)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= variable asignacionSimbolo valorcaracter puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.CARACTER)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= variable asignacionSimbolo caracter_ascii puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.CARACTER_ASCII)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= variable asignacionSimbolo verdadero puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.VERDADERO)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= variable asignacionSimbolo falso puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.FALSO)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= comentario_linea 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("Comentario"), new Comentario(a));
            RESULT.addSon(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= comentario_multilinea 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("ComentarioMl"), new ComentarioMl(a));
            RESULT.addSon(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= si EXPRESION_RELACIONAL entonces INSTRUCCIONES fin_si 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Condicional"), new Condicional((Operacion)a.getIns(), b.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon("fin_si");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= si EXPRESION_RELACIONAL entonces INSTRUCCIONES de_lo_contrario INSTRUCCIONES fin_si 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Condicional"), new Condicional((Operacion)a.getIns(), b.getInstructions(), c.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon("de_lo_contrario");
            RESULT.addSon(c);
            RESULT.addSon("fin_si");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= si EXPRESION_RELACIONAL entonces INSTRUCCIONES CONDICIONAL_RECURSIVO de_lo_contrario INSTRUCCIONES fin_si 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production d = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Condicional"), new Condicional((Operacion)a.getIns(), b.getInstructions(), c.getInstructions(), d.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon(c);
            RESULT.addSon("de_lo_contrario");
            RESULT.addSon(d);
            RESULT.addSon("fin_si");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= si EXPRESION_RELACIONAL entonces INSTRUCCIONES CONDICIONAL_RECURSIVO fin_si 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Production(new Node("Condicional"), new Condicional((Operacion)a.getIns(), b.getInstructions(), c.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon(c);
            RESULT.addSon("fin_si");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= segun EXPRESION hacer SELECCION_RECURSIVO de_lo_contrario entonces INSTRUCCIONES fin_segun 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
             RESULT=new Production(new Node("Seleccion"), new Seleccion((Operacion)a.getIns(), b.getInstructions(), c.getInstructions()));
             RESULT.addSon("segun");
             RESULT.addSon(a);
             RESULT.addSon("hacer");
             RESULT.addSon(b);
             RESULT.addSon("de_lo_contrario");
             RESULT.addSon("entonces");
             RESULT.addSon(c);
             RESULT.addSon("fin_segun");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= segun EXPRESION hacer SELECCION_RECURSIVO fin_segun 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
             RESULT=new Production(new Node("Seleccion"), new Seleccion((Operacion)a.getIns(), b.getInstructions()));
             RESULT.addSon("segun");
             RESULT.addSon(a);
             RESULT.addSon("hacer");
             RESULT.addSon(b);
             RESULT.addSon("fin_segun");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= para VARIABLE_RELACIONAL asignacionSimbolo VARIABLE_RELACIONAL hasta VARIABLE_RELACIONAL hacer INSTRUCCIONES fin_para 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production d = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
             RESULT=new Production(new Node("Para"), new Para((Operacion)a.getIns(), (Operacion)b.getIns(), (Operacion)c.getIns(), d.getInstructions()));
             RESULT.addSon("para");
             RESULT.addSon(a);
             RESULT.addSon("->");
             RESULT.addSon(b);
             RESULT.addSon("hasta");
             RESULT.addSon(c);
             RESULT.addSon("hacer");
             RESULT.addSon(d);
             RESULT.addSon("fin_para");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= para VARIABLE_RELACIONAL asignacionSimbolo VARIABLE_RELACIONAL hasta VARIABLE_RELACIONAL hacer fin_para 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
             RESULT=new Production(new Node("Para"), new Para((Operacion)a.getIns(), (Operacion)b.getIns(),(Operacion)c.getIns()));
             RESULT.addSon("para");
             RESULT.addSon(a);
             RESULT.addSon("->");
             RESULT.addSon(b);
             RESULT.addSon("hasta");
             RESULT.addSon(c);
             RESULT.addSon("hacer");
             RESULT.addSon("fin_para");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= para VARIABLE_RELACIONAL asignacionSimbolo VARIABLE_RELACIONAL hasta VARIABLE_RELACIONAL con incremental VARIABLE_RELACIONAL hacer INSTRUCCIONES fin_para 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production d = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production e = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
             RESULT=new Production(new Node("Para"), new Para((Operacion)a.getIns(), (Operacion)b.getIns(), (Operacion)c.getIns(),(Operacion)d.getIns(), e.getInstructions()));
             RESULT.addSon("para");
             RESULT.addSon(a);
             RESULT.addSon("->");
             RESULT.addSon(b);
             RESULT.addSon("hasta");
             RESULT.addSon(c);
             RESULT.addSon("con");
             RESULT.addSon("incremental");
             RESULT.addSon(d);
             RESULT.addSon("hacer");
             RESULT.addSon(e);
             RESULT.addSon("fin_para");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= para VARIABLE_RELACIONAL asignacionSimbolo VARIABLE_RELACIONAL hasta VARIABLE_RELACIONAL con incremental VARIABLE_RELACIONAL hacer fin_para 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production d = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
             RESULT=new Production(new Node("Para"), new Para((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), d.getInstructions()));
             RESULT.addSon("para");
             RESULT.addSon(a);
             RESULT.addSon("->");
             RESULT.addSon(b);
             RESULT.addSon("hasta");
             RESULT.addSon(c);
             RESULT.addSon("con");
             RESULT.addSon("incremental");
             RESULT.addSon(d);
             RESULT.addSon("hacer");
             RESULT.addSon("fin_para");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= mientras EXPRESION_RELACIONAL hacer INSTRUCCIONES fin_mientras 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
             RESULT=new Production(new Node("Mientras"), new Mientras((Operacion)a.getIns(), b.getInstructions()));
             RESULT.addSon("mientras");
             RESULT.addSon(a);
             RESULT.addSon("hacer");
             RESULT.addSon(b);
             RESULT.addSon("fin_mientras");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= mientras EXPRESION_RELACIONAL hacer fin_mientras 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
             RESULT=new Production(new Node("Mientras"), new Mientras((Operacion) a.getIns()));
             RESULT.addSon("mientras");
             RESULT.addSon(a);
             RESULT.addSon("hacer");
             RESULT.addSon("fin_mientras");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= repetir INSTRUCCIONES hasta_que EXPRESION_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=new Production(new Node("Repetir"), new Repetir((Operacion)b.getIns(),a.getInstructions()));
             RESULT.addSon("repetir");
             RESULT.addSon(a);
             RESULT.addSon("hasta_que");
             RESULT.addSon(b);
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= repetir hasta_que EXPRESION_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=new Production(new Node("Repetir"), new Repetir((Operacion)a.getIns()));
             RESULT.addSon("repetir");
             RESULT.addSon("hasta_que");
             RESULT.addSon(a);
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= retornar EXPRESION puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
             RESULT=new Production(new Node("Retorno"), new Retorno((Operacion)a.getIns()));
             RESULT.addSon("retornar");
             RESULT.addSon(a);
             RESULT.addSon(";");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= ejecutar variable parAbierto parCerrado puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
             RESULT=new Production(new Node("Ejecutar"), new Ejecutar(a));
             RESULT.addSon("ejecutar");
             RESULT.addSon(a);
             RESULT.addSon("(");
             RESULT.addSon(")");
             RESULT.addSon(";");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= ejecutar variable parAbierto VARIABLE_RELACIONAL parCerrado puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
             RESULT=new Production(new Node("Ejecutar"), new Ejecutar(a, b.toString()));
             RESULT.addSon("ejecutar");
             RESULT.addSon(a);
             RESULT.addSon("(");
             RESULT.addSon(b);
             RESULT.addSon(")");
             RESULT.addSon(";");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= metodo variable INSTRUCCIONES fin_metodo 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
             RESULT=new Production(new Node("Metodo"), new Metodo(a, b.getInstructions()));
             RESULT.addSon("metodo");
             RESULT.addSon(a);
             RESULT.addSon(b);
             RESULT.addSon("fin_metodo");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= metodo variable con_parametros parAbierto PARAMETROS_RECURSIVO parCerrado INSTRUCCIONES fin_metodo 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
             RESULT=new Production(new Node("Metodo"), new Metodo(a, b.toString(), c.getInstructions()));
             RESULT.addSon("metodo");
             RESULT.addSon(a);
             RESULT.addSon("con_parametros");
             RESULT.addSon("(");
             RESULT.addSon(b);
             RESULT.addSon(")");
             RESULT.addSon(c);
             RESULT.addSon("fin_metodo");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= funcion variable TIPO INSTRUCCIONES fin_funcion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Funcion"), new Funcion(a, b.getInstructions(),c.toString()));
              RESULT.addSon("funcion");
              RESULT.addSon(a);
              RESULT.addSon(c);
              RESULT.addSon(b);
              RESULT.addSon("fin_funcion");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= funcion variable TIPO con_parametros parAbierto PARAMETROS_RECURSIVO parCerrado INSTRUCCIONES fin_funcion 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production d = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Funcion"), new Funcion(a, b.toString(), d.getInstructions(),c.toString()));
              RESULT.addSon("funcion");
              RESULT.addSon(a);
              RESULT.addSon(c);
              RESULT.addSon("con_parametros");
              RESULT.addSon("(");
              RESULT.addSon(b);
              RESULT.addSon(")");
              RESULT.addSon(d);
              RESULT.addSon("fin_funcion");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= imprimir EXPRESION puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Imprimir"),  new Imprimir((Operacion) a.getIns()));
              RESULT.addSon("imprimir");
              RESULT.addSon(a);
              RESULT.addSon(";");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= imprimir valorcadena puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Imprimir"), new Imprimir(new Operacion(a, Operacion.Tipo_operacion.CADENA)));
              RESULT.addSon("imprimir");
              RESULT.addSon(a);
              RESULT.addSon(";");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= imprimir valorcaracter puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Imprimir"), new Imprimir(new Operacion(a, Operacion.Tipo_operacion.CARACTER)));
              RESULT.addSon("imprimir");
              RESULT.addSon(a);
              RESULT.addSon(";");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCION ::= imprimir caracter_ascii puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Imprimir"), new Imprimir(new Operacion(a, Operacion.Tipo_operacion.CARACTER_ASCII)));
              RESULT.addSon("imprimir");
              RESULT.addSon(a);
              RESULT.addSon(";");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCION ::= imprimir_nl EXPRESION puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Imprimir"), new ImprimirNl((Operacion) a.getIns()));
              RESULT.addSon("imprimir_nl");
              RESULT.addSon(a);
              RESULT.addSon(";");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= imprimir_nl valorcadena puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Imprimir"), new ImprimirNl(new Operacion(a, Operacion.Tipo_operacion.CADENA)));
              RESULT.addSon("imprimir_nl");
              RESULT.addSon(a);
              RESULT.addSon(";");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= imprimir_nl valorcaracter puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Imprimir"), new ImprimirNl(new Operacion(a, Operacion.Tipo_operacion.CARACTER)));
              RESULT.addSon("imprimir_nl");
              RESULT.addSon(a);
              RESULT.addSon(";");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCION ::= imprimir_nl caracter_ascii puntocoma 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              RESULT=new Production(new Node("Imprimir"), new ImprimirNl(new Operacion(a, Operacion.Tipo_operacion.CARACTER_ASCII)));
              RESULT.addSon("imprimir_nl");
              RESULT.addSon(a);
              RESULT.addSon(";");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCION ::= error 
            {
              Production RESULT =null;
		
              RESULT=new Production(new Node("Error"), new Error());
              RESULT.addSon("error");
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICIONAL_RECURSIVO ::= CONDICIONAL_RECURSIVO o_si EXPRESION_RELACIONAL entonces INSTRUCCIONES 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Production(new Node("o_si"), c.getInstructions());
            RESULT.addIns(new Condicional((Operacion)a.getIns(), b.getInstructions()));
            RESULT.addSon(a);
            RESULT.addSon("o_si");
            RESULT.addSon(b);
            RESULT.addSon("entonces");
            RESULT.addSon(c);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_RECURSIVO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICIONAL_RECURSIVO ::= o_si EXPRESION_RELACIONAL entonces INSTRUCCIONES 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("o_si"), new LinkedList<>());
            RESULT.addIns(new Condicional((Operacion)a.getIns(), b.getInstructions()));
            RESULT.addSon("o_si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_RECURSIVO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SELECCION_RECURSIVO ::= interroganteIzquierdo EXPRESION interroganteDerecho entonces INSTRUCCIONES SELECCION_RECURSIVO 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("Seleccion_Recursivo"), new Seleccion((Operacion)a.getIns(),b.getInstructions(), c.getInstructions()));
            RESULT.addSon("¿");
            RESULT.addSon(a);
            RESULT.addSon("?");
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon(c);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_RECURSIVO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SELECCION_RECURSIVO ::= interroganteIzquierdo EXPRESION interroganteDerecho entonces INSTRUCCIONES 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("Seleccion_Recursivo"), new Seleccion((Operacion)a.getIns(), b.getInstructions()));
            RESULT.addSon("¿");
            RESULT.addSon(a);
            RESULT.addSon("?");
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_RECURSIVO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETROS_RECURSIVO ::= variable TIPO coma PARAMETROS_RECURSIVO 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production c = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("Parametros"), new Parametros(a, b.toString(), c.getInstructions()));
            RESULT.addSon(a);
            RESULT.addSon(b);
            RESULT.addSon(",");
            RESULT.addSon(c);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_RECURSIVO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETROS_RECURSIVO ::= variable TIPO 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("Parametros"), new Parametros(a, b.toString()));
            RESULT.addSon(a);
            RESULT.addSon(b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_RECURSIVO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= numero 
            {
              String RESULT =null;
		
            RESULT="numero";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= caracter 
            {
              String RESULT =null;
		
            RESULT="caracter";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= caracter_ascii 
            {
              String RESULT =null;
		
            RESULT="caracter";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= booleano 
            {
              String RESULT =null;
		
            RESULT="boolean";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= cadena 
            {
              String RESULT =null;
		
            RESULT="cadena";
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= menos EXPRESION 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                    RESULT.addSon("-");
                    RESULT.addSon(a);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                    RESULT.addSon(a);
                    RESULT.addSon("+");
                    RESULT.addSon(b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                    RESULT.addSon(a);
                    RESULT.addSon("-");
                    RESULT.addSon(b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                    RESULT.addSon(a);
                    RESULT.addSon("*");
                    RESULT.addSon(b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION dividido EXPRESION 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                    RESULT.addSon(a);
                    RESULT.addSon("/");
                    RESULT.addSon(b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION potencia corAbrir EXPRESION corCerrar 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.POTENCIA));
                    RESULT.addSon(a);
                    RESULT.addSon("potencia");
                    RESULT.addSon("[");
                    RESULT.addSon(b);
                    RESULT.addSon("]");
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION mod EXPRESION 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MODULO));
                    RESULT.addSon(a);
                    RESULT.addSon("mod");
                    RESULT.addSon(b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= decimal 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= entero 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= variable 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.VARIABLE));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= parAbierto EXPRESION parCerrado 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Production(new Node("Expresion"), a.getIns());
                    RESULT.addSon("(");
                    RESULT.addSon(a);
                    RESULT.addSon(")");
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION_RELACIONAL ::= VARIABLE_RELACIONAL mayor VARIABLE_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.mayor));
            RESULT.addSon(a);
            RESULT.addSon("mayor");
            RESULT.addSon(b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_RELACIONAL ::= VARIABLE_RELACIONAL menor VARIABLE_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.menor));
              RESULT.addSon(a);
              RESULT.addSon("menor");
              RESULT.addSon(b);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_RELACIONAL ::= VARIABLE_RELACIONAL mayor_o_igual VARIABLE_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.mayor_o_igual));
              RESULT.addSon(a);
              RESULT.addSon("mayor_o_igual");
              RESULT.addSon(b);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION_RELACIONAL ::= VARIABLE_RELACIONAL and VARIABLE_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.and));
              RESULT.addSon(a);
              RESULT.addSon("and");
              RESULT.addSon(b);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_RELACIONAL ::= VARIABLE_RELACIONAL es_igual VARIABLE_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.es_igual));
              RESULT.addSon(a);
              RESULT.addSon("es_igual");
              RESULT.addSon(b);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_RELACIONAL ::= VARIABLE_RELACIONAL es_diferente VARIABLE_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.es_diferente));
              RESULT.addSon(a);
              RESULT.addSon("es_diferente");
              RESULT.addSon(b);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_RELACIONAL ::= VARIABLE_RELACIONAL or VARIABLE_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.or));
              RESULT.addSon(a);
              RESULT.addSon("or");
              RESULT.addSon(b);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_RELACIONAL ::= VARIABLE_RELACIONAL not VARIABLE_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.NOT));
              RESULT.addSon(a);
              RESULT.addSon("not");
              RESULT.addSon(b);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_RELACIONAL ::= VARIABLE_RELACIONAL menor_o_igual VARIABLE_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production b = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.menor_o_igual));
              RESULT.addSon(a);
              RESULT.addSon("menor_o_igual");
              RESULT.addSon(b);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_RELACIONAL ::= not EXPRESION_RELACIONAL 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(), Operacion.Tipo_operacion.NOT));
            RESULT.addSon("not");
            RESULT.addSon(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLE_RELACIONAL ::= EXPRESION 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Production a = (Production)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("VariableRelacional"), new Operacion((Operacion)a.getIns(), Operacion.Tipo_operacion.VARIABLE));
            RESULT.addSon(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_RELACIONAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLE_RELACIONAL ::= valorcadena 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.CADENA));
            RESULT.addSon(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_RELACIONAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLE_RELACIONAL ::= valorcaracter 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.CARACTER));
            RESULT.addSon(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_RELACIONAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLE_RELACIONAL ::= caracter_ascii 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.CARACTER_ASCII));
            RESULT.addSon(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_RELACIONAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIABLE_RELACIONAL ::= verdadero 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.VERDADERO));
            RESULT.addSon(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_RELACIONAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIABLE_RELACIONAL ::= falso 
            {
              Production RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.FALSO));
            RESULT.addSon(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_RELACIONAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
