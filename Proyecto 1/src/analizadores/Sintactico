package analizadores; 
import java_cup.runtime.*;
import analizadores.*;
import java.util.ArrayList;
import principal.*;
import java.util.LinkedList;

import Structures.Node;
import Structures.Arbol;
import Structures.Production;
import Structures.Instructions.Operacion;
import Structures.Instructions.Declaracion;
import Structures.Instructions.Instruccion;
import Structures.Instructions.Asignacion;
import Structures.Instructions.Condicional;
import Structures.Instructions.Seleccion;
import Structures.Instructions.Para;
import Structures.Instructions.Parametros;
import Structures.Instructions.Mientras;
import Structures.Instructions.Repetir;
import Structures.Instructions.Retorno;
import Structures.Instructions.Metodo;
import Structures.Instructions.Funcion;
import Structures.Instructions.Ejecutar;
import Structures.Instructions.ComentarioMl;
import Structures.Instructions.Comentario;
import Structures.Instructions.ImprimirNl;
import Structures.Instructions.Imprimir;
import Structures.Instructions.Error;


parser code
{:

    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    // error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

         ArrayList<String> errores = new ArrayList<String>();
            errores.add(lexema);
            errores.add(String.valueOf(fila));
            errores.add(String.valueOf(columna));
            Main.errores.add(errores);
        System.out.println("=======Error Sintactico Recuperado========");


    }

    //momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("=======ErrorIrrecuperable=========");

    }

    public Arbol getArbol()
    {
        return arbol;
    }
    public LinkedList<Instruccion> getAST()
    {
        return AST;
    }
:}

terminal String verdadero, falso, decimal, entero, cadena, caracter, comentario_linea, comentario_multilinea, variable, asignacionSimbolo, mas, menos;
terminal String potencia, por, dividido, booleano, mod, mayor, menor, mayor_o_igual, menor_o_igual, es_igual, es_diferente, or, and, not, inicio, fin;
terminal String ingresar, como, con_valor, si, fin_si, de_lo_contrario, o_si, segun, entonces, fin_segun, para, hasta, fin_para, con, incremental;
terminal String mientras, hacer, fin_mientras, repetir, hasta_que, retornar, metodo, fin_metodo, con_parametros, funcion, fin_funcion, ejecutar, imprimir, imprimir_nl;
terminal String numero, valorcadena, valorcaracter, puntocoma, coma, corCerrar, corAbrir, interroganteIzquierdo, interroganteDerecho;
terminal String parAbierto, parCerrado, caracter_ascii;

non terminal INICIO;
non terminal Production INSTRUCCIONES, INSTRUCCION, VARIABLE_RELACIONAL;
non terminal Production CONDICIONAL_RECURSIVO;
non terminal Production SELECCION_RECURSIVO,  EXPRESION;// VARIABLE_CICLO;LISTAVARIABLES,
non terminal Production EXPRESION_RELACIONAL;
non terminal Production PARAMETROS_RECURSIVO;
non terminal String TIPO;// VALOR_RACIONAL;

precedence left mas, menos;
precedence left por, dividido, mod;
precedence left potencia;


start with INICIO;

INICIO::= inicio INSTRUCCIONES:a fin             {:
                                                    //se guarda el AST, que es la lista principal de instrucciones en la variable
                                                    //AST que se defini√≥ dentro del parser
                                                    parser.AST=a.getInstructions();
                                                    Node NODERAIZ = new Node("INIT"); NODERAIZ.addSon(a.getNode());
                                                    parser.arbol=new Arbol(NODERAIZ);
                                                :}
;

INSTRUCCIONES ::=
   INSTRUCCIONES:a INSTRUCCION:b                {:
                                                    RESULT=new Production(new Node("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                :}
 | INSTRUCCION:a                                {:
                                                    RESULT=new Production(new Node("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                :}
;


INSTRUCCION::=
ingresar variable:a como numero con_valor EXPRESION:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), (Operacion) b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("numero");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|ingresar variable:a como cadena con_valor valorcadena:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.CADENA)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("cadena");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|ingresar variable:a como caracter con_valor valorcaracter:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.CARACTER)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("caracter");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|ingresar variable:a como caracter con_valor caracter_ascii:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.CARACTER_ASCII)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("caracter");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|ingresar variable:a como booleano con_valor verdadero:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.VERDADERO)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("boolean");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|ingresar variable:a como booleano con_valor falso:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), new Operacion(b,Operacion.Tipo_operacion.FALSO)));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("boolean");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|ingresar variable:a como booleano con_valor EXPRESION_RELACIONAL:b puntocoma {:
            RESULT=new Production(new Node("Declaracion"), new Declaracion(new Operacion(a.toString(),Operacion.Tipo_operacion.VARIABLE), (Operacion)b.getIns()));
            RESULT.addSon("ingresar");
            RESULT.addSon(a);
            RESULT.addSon("como");
            RESULT.addSon("boolean");
            RESULT.addSon("con_valor");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|variable:a asignacionSimbolo EXPRESION:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), (Operacion) b.getIns()));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|variable:a asignacionSimbolo valorcadena:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.CADENA)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|variable:a asignacionSimbolo valorcaracter:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.CARACTER)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|variable:a asignacionSimbolo caracter_ascii:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.CARACTER_ASCII)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|variable:a asignacionSimbolo verdadero:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.VERDADERO)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|variable:a asignacionSimbolo falso:b puntocoma {:
            RESULT=new Production(new Node("Asignacion"), new Asignacion(new Operacion(a.toString(),Operacion.Tipo_operacion.CADENA), new Operacion(b,Operacion.Tipo_operacion.FALSO)));
            RESULT.addSon(a);
            RESULT.addSon("->");
            RESULT.addSon(b);
            RESULT.addSon(";");
            :}
|comentario_linea:a {:
            RESULT=new Production(new Node("Comentario"), new Comentario(a));
            RESULT.addSon(a);
            :}
|comentario_multilinea:a {:
            RESULT=new Production(new Node("ComentarioMl"), new ComentarioMl(a));
            RESULT.addSon(a);
            :}
|si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b fin_si {:
            RESULT=new Production(new Node("Condicional"), new Condicional((Operacion)a.getIns(), b.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon("fin_si");
            :}
|si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b de_lo_contrario INSTRUCCIONES:c fin_si {:
            RESULT=new Production(new Node("Condicional"), new Condicional((Operacion)a.getIns(), b.getInstructions(), c.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon("de_lo_contrario");
            RESULT.addSon(c);
            RESULT.addSon("fin_si");
            :}
|si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b CONDICIONAL_RECURSIVO:c de_lo_contrario INSTRUCCIONES:d fin_si {:
            RESULT=new Production(new Node("Condicional"), new Condicional((Operacion)a.getIns(), b.getInstructions(), c.getInstructions(), d.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon(c);
            RESULT.addSon("de_lo_contrario");
            RESULT.addSon(d);
            RESULT.addSon("fin_si");
            :}
|si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b CONDICIONAL_RECURSIVO:c fin_si {:
            RESULT=new Production(new Node("Condicional"), new Condicional((Operacion)a.getIns(), b.getInstructions(), c.getInstructions()));
            RESULT.addSon("si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon(c);
            RESULT.addSon("fin_si");
            :}
|segun EXPRESION:a hacer SELECCION_RECURSIVO:b de_lo_contrario entonces INSTRUCCIONES:c fin_segun {:
             RESULT=new Production(new Node("Seleccion"), new Seleccion((Operacion)a.getIns(), b.getInstructions(), c.getInstructions()));
             RESULT.addSon("segun");
             RESULT.addSon(a);
             RESULT.addSon("hacer");
             RESULT.addSon(b);
             RESULT.addSon("de_lo_contrario");
             RESULT.addSon("entonces");
             RESULT.addSon(c);
             RESULT.addSon("fin_segun");
             :}
|segun EXPRESION:a hacer SELECCION_RECURSIVO:b fin_segun {:
             RESULT=new Production(new Node("Seleccion"), new Seleccion((Operacion)a.getIns(), b.getInstructions()));
             RESULT.addSon("segun");
             RESULT.addSon(a);
             RESULT.addSon("hacer");
             RESULT.addSon(b);
             RESULT.addSon("fin_segun");
             :}
|para VARIABLE_RELACIONAL:a asignacionSimbolo VARIABLE_RELACIONAL:b hasta VARIABLE_RELACIONAL:c hacer INSTRUCCIONES:d fin_para {:
             RESULT=new Production(new Node("Para"), new Para((Operacion)a.getIns(), (Operacion)b.getIns(), (Operacion)c.getIns(), d.getInstructions()));
             RESULT.addSon("para");
             RESULT.addSon(a);
             RESULT.addSon("->");
             RESULT.addSon(b);
             RESULT.addSon("hasta");
             RESULT.addSon(c);
             RESULT.addSon("hacer");
             RESULT.addSon(d);
             RESULT.addSon("fin_para");
             :}
|para VARIABLE_RELACIONAL:a asignacionSimbolo VARIABLE_RELACIONAL:b hasta VARIABLE_RELACIONAL:c hacer fin_para {:
             RESULT=new Production(new Node("Para"), new Para((Operacion)a.getIns(), (Operacion)b.getIns(),(Operacion)c.getIns()));
             RESULT.addSon("para");
             RESULT.addSon(a);
             RESULT.addSon("->");
             RESULT.addSon(b);
             RESULT.addSon("hasta");
             RESULT.addSon(c);
             RESULT.addSon("hacer");
             RESULT.addSon("fin_para");
             :}
|para VARIABLE_RELACIONAL:a asignacionSimbolo VARIABLE_RELACIONAL:b hasta VARIABLE_RELACIONAL:c con incremental VARIABLE_RELACIONAL:d hacer INSTRUCCIONES:e fin_para {:
             RESULT=new Production(new Node("Para"), new Para((Operacion)a.getIns(), (Operacion)b.getIns(), (Operacion)c.getIns(),(Operacion)d.getIns(), e.getInstructions()));
             RESULT.addSon("para");
             RESULT.addSon(a);
             RESULT.addSon("->");
             RESULT.addSon(b);
             RESULT.addSon("hasta");
             RESULT.addSon(c);
             RESULT.addSon("con");
             RESULT.addSon("incremental");
             RESULT.addSon(d);
             RESULT.addSon("hacer");
             RESULT.addSon(e);
             RESULT.addSon("fin_para");
             :}
|para VARIABLE_RELACIONAL:a asignacionSimbolo VARIABLE_RELACIONAL:b hasta VARIABLE_RELACIONAL:c con incremental VARIABLE_RELACIONAL:d hacer fin_para {:
             RESULT=new Production(new Node("Para"), new Para((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), d.getInstructions()));
             RESULT.addSon("para");
             RESULT.addSon(a);
             RESULT.addSon("->");
             RESULT.addSon(b);
             RESULT.addSon("hasta");
             RESULT.addSon(c);
             RESULT.addSon("con");
             RESULT.addSon("incremental");
             RESULT.addSon(d);
             RESULT.addSon("hacer");
             RESULT.addSon("fin_para");
             :}
|mientras EXPRESION_RELACIONAL:a hacer INSTRUCCIONES:b fin_mientras {:
             RESULT=new Production(new Node("Mientras"), new Mientras((Operacion)a.getIns(), b.getInstructions()));
             RESULT.addSon("mientras");
             RESULT.addSon(a);
             RESULT.addSon("hacer");
             RESULT.addSon(b);
             RESULT.addSon("fin_mientras");
             :}
|mientras EXPRESION_RELACIONAL:a hacer fin_mientras {:
             RESULT=new Production(new Node("Mientras"), new Mientras((Operacion) a.getIns()));
             RESULT.addSon("mientras");
             RESULT.addSon(a);
             RESULT.addSon("hacer");
             RESULT.addSon("fin_mientras");
             :}
|repetir INSTRUCCIONES:a hasta_que EXPRESION_RELACIONAL:b {:
             RESULT=new Production(new Node("Repetir"), new Repetir((Operacion)b.getIns(),a.getInstructions()));
             RESULT.addSon("repetir");
             RESULT.addSon(a);
             RESULT.addSon("hasta_que");
             RESULT.addSon(b);
             :}
|repetir hasta_que EXPRESION_RELACIONAL:a {:
             RESULT=new Production(new Node("Repetir"), new Repetir((Operacion)a.getIns()));
             RESULT.addSon("repetir");
             RESULT.addSon("hasta_que");
             RESULT.addSon(a);
             :}
|retornar EXPRESION:a puntocoma {:
             RESULT=new Production(new Node("Retorno"), new Retorno((Operacion)a.getIns()));
             RESULT.addSon("retornar");
             RESULT.addSon(a);
             RESULT.addSon(";");
             :}
|ejecutar variable:a parAbierto parCerrado puntocoma {:
             RESULT=new Production(new Node("Ejecutar"), new Ejecutar(a));
             RESULT.addSon("ejecutar");
             RESULT.addSon(a);
             RESULT.addSon("(");
             RESULT.addSon(")");
             RESULT.addSon(";");
             :}
|ejecutar variable:a parAbierto VARIABLE_RELACIONAL:b parCerrado puntocoma {:
             RESULT=new Production(new Node("Ejecutar"), new Ejecutar(a, b.toString()));
             RESULT.addSon("ejecutar");
             RESULT.addSon(a);
             RESULT.addSon("(");
             RESULT.addSon(b);
             RESULT.addSon(")");
             RESULT.addSon(";");
             :}

|metodo variable:a INSTRUCCIONES:b fin_metodo {:
             RESULT=new Production(new Node("Metodo"), new Metodo(a, b.getInstructions()));
             RESULT.addSon("metodo");
             RESULT.addSon(a);
             RESULT.addSon(b);
             RESULT.addSon("fin_metodo");
             :}
|metodo variable:a con_parametros parAbierto PARAMETROS_RECURSIVO:b parCerrado INSTRUCCIONES:c fin_metodo {:
             RESULT=new Production(new Node("Metodo"), new Metodo(a, b.toString(), c.getInstructions()));
             RESULT.addSon("metodo");
             RESULT.addSon(a);
             RESULT.addSon("con_parametros");
             RESULT.addSon("(");
             RESULT.addSon(b);
             RESULT.addSon(")");
             RESULT.addSon(c);
             RESULT.addSon("fin_metodo");
             :}
|funcion variable:a TIPO:c INSTRUCCIONES:b fin_funcion {:
              RESULT=new Production(new Node("Funcion"), new Funcion(a, b.getInstructions(),c.toString()));
              RESULT.addSon("funcion");
              RESULT.addSon(a);
              RESULT.addSon(c);
              RESULT.addSon(b);
              RESULT.addSon("fin_funcion");
              :}
|funcion variable:a TIPO:c con_parametros parAbierto PARAMETROS_RECURSIVO:b parCerrado INSTRUCCIONES:d fin_funcion {:
              RESULT=new Production(new Node("Funcion"), new Funcion(a, b.toString(), d.getInstructions(),c.toString()));
              RESULT.addSon("funcion");
              RESULT.addSon(a);
              RESULT.addSon(c);
              RESULT.addSon("con_parametros");
              RESULT.addSon("(");
              RESULT.addSon(b);
              RESULT.addSon(")");
              RESULT.addSon(d);
              RESULT.addSon("fin_funcion");
              :}
|imprimir EXPRESION:a puntocoma {:
              RESULT=new Production(new Node("Imprimir"),  new Imprimir((Operacion) a.getIns()));
              RESULT.addSon("imprimir");
              RESULT.addSon(a);
              RESULT.addSon(";");
              :}
|imprimir valorcadena:a puntocoma {:
              RESULT=new Production(new Node("Imprimir"), new Imprimir(new Operacion(a, Operacion.Tipo_operacion.CADENA)));
              RESULT.addSon("imprimir");
              RESULT.addSon(a);
              RESULT.addSon(";");
              :}
|imprimir valorcaracter:a puntocoma {:
              RESULT=new Production(new Node("Imprimir"), new Imprimir(new Operacion(a, Operacion.Tipo_operacion.CARACTER)));
              RESULT.addSon("imprimir");
              RESULT.addSon(a);
              RESULT.addSon(";");
              :}
|imprimir caracter_ascii:a puntocoma {:
              RESULT=new Production(new Node("Imprimir"), new Imprimir(new Operacion(a, Operacion.Tipo_operacion.CARACTER_ASCII)));
              RESULT.addSon("imprimir");
              RESULT.addSon(a);
              RESULT.addSon(";");
              :}
|imprimir_nl EXPRESION:a puntocoma {:
              RESULT=new Production(new Node("Imprimir"), new ImprimirNl((Operacion) a.getIns()));
              RESULT.addSon("imprimir_nl");
              RESULT.addSon(a);
              RESULT.addSon(";");
              :}
|imprimir_nl valorcadena:a puntocoma {:
              RESULT=new Production(new Node("Imprimir"), new ImprimirNl(new Operacion(a, Operacion.Tipo_operacion.CADENA)));
              RESULT.addSon("imprimir_nl");
              RESULT.addSon(a);
              RESULT.addSon(";");
              :}
|imprimir_nl valorcaracter:a puntocoma {:
              RESULT=new Production(new Node("Imprimir"), new ImprimirNl(new Operacion(a, Operacion.Tipo_operacion.CARACTER)));
              RESULT.addSon("imprimir_nl");
              RESULT.addSon(a);
              RESULT.addSon(";");
              :}
|imprimir_nl caracter_ascii:a puntocoma {:
              RESULT=new Production(new Node("Imprimir"), new ImprimirNl(new Operacion(a, Operacion.Tipo_operacion.CARACTER_ASCII)));
              RESULT.addSon("imprimir_nl");
              RESULT.addSon(a);
              RESULT.addSon(";");
              :}
|error {:
              RESULT=new Production(new Node("Error"), new Error());
              RESULT.addSon("error");
              :}
 ;

CONDICIONAL_RECURSIVO::=
CONDICIONAL_RECURSIVO:a o_si EXPRESION_RELACIONAL:b entonces INSTRUCCIONES:c {:
            RESULT = new Production(new Node("o_si"), c.getInstructions());
            RESULT.addIns(new Condicional((Operacion)a.getIns(), b.getInstructions()));
            RESULT.addSon(a);
            RESULT.addSon("o_si");
            RESULT.addSon(b);
            RESULT.addSon("entonces");
            RESULT.addSon(c);
            :}
|o_si EXPRESION_RELACIONAL:a entonces INSTRUCCIONES:b {:
            RESULT=new Production(new Node("o_si"), new LinkedList<>());
            RESULT.addIns(new Condicional((Operacion)a.getIns(), b.getInstructions()));
            RESULT.addSon("o_si");
            RESULT.addSon(a);
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            :}
;


SELECCION_RECURSIVO::=
interroganteIzquierdo EXPRESION:a interroganteDerecho entonces INSTRUCCIONES:b SELECCION_RECURSIVO:c {:
            RESULT=new Production(new Node("Seleccion_Recursivo"), new Seleccion((Operacion)a.getIns(),b.getInstructions(), c.getInstructions()));
            RESULT.addSon("¬ø");
            RESULT.addSon(a);
            RESULT.addSon("?");
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            RESULT.addSon(c);
            :}
|interroganteIzquierdo EXPRESION:a interroganteDerecho entonces INSTRUCCIONES:b {:
            RESULT=new Production(new Node("Seleccion_Recursivo"), new Seleccion((Operacion)a.getIns(), b.getInstructions()));
            RESULT.addSon("¬ø");
            RESULT.addSon(a);
            RESULT.addSon("?");
            RESULT.addSon("entonces");
            RESULT.addSon(b);
            :}
;



PARAMETROS_RECURSIVO::=
variable:a TIPO:b coma PARAMETROS_RECURSIVO:c {:
            RESULT=new Production(new Node("Parametros"), new Parametros(a, b.toString(), c.getInstructions()));
            RESULT.addSon(a);
            RESULT.addSon(b);
            RESULT.addSon(",");
            RESULT.addSon(c);
            :}
| variable:a TIPO:b {:
            RESULT=new Production(new Node("Parametros"), new Parametros(a, b.toString()));
            RESULT.addSon(a);
            RESULT.addSon(b);
            :}
;

TIPO::=
numero {:
            RESULT="numero";
            :}
| caracter {:
            RESULT="caracter";
            :}
| caracter_ascii {:
            RESULT="caracter";
            :}
| booleano {:
            RESULT="boolean";
            :}
| cadena {:
            RESULT="cadena";
            :}
;

/*LISTAVARIABLES::=
variable:a coma LISTAVARIABLES:b {:
            RESULT=new Production(new Node("ListaVariables"), new Operacion(a,Operacion.Tipo_operacion.VARIABLE));
            RESULT.addSon(a);
            RESULT.addSon(",");
            RESULT.addSon(b);
            :}
| variable:c {:RESULT=new Production(new Node(null, c), new Operacion(c,Operacion.Tipo_operacion.VARIABLE));:}
;*/


EXPRESION::=
menos EXPRESION:a {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                    RESULT.addSon("-");
                    RESULT.addSon(a);
                    :}
| EXPRESION:a mas EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                    RESULT.addSon(a);
                    RESULT.addSon("+");
                    RESULT.addSon(b);
                    :}
| EXPRESION:a menos EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                    RESULT.addSon(a);
                    RESULT.addSon("-");
                    RESULT.addSon(b);
                    :}
| EXPRESION:a por EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                    RESULT.addSon(a);
                    RESULT.addSon("*");
                    RESULT.addSon(b);
                    :}
| EXPRESION:a dividido EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                    RESULT.addSon(a);
                    RESULT.addSon("/");
                    RESULT.addSon(b);
                    :}
| EXPRESION:a potencia corAbrir EXPRESION:b corCerrar {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.POTENCIA));
                    RESULT.addSon(a);
                    RESULT.addSon("potencia");
                    RESULT.addSon("[");
                    RESULT.addSon(b);
                    RESULT.addSon("]");
                    :}
| EXPRESION:a mod EXPRESION:b {:RESULT=new Production(new Node("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MODULO));
                    RESULT.addSon(a);
                    RESULT.addSon("mod");
                    RESULT.addSon(b);
                    :}
| decimal:a {:RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));:}
| entero:a {:RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));:}
| variable:a {:RESULT=new Production(new Node(null, a), new Operacion(a,Operacion.Tipo_operacion.VARIABLE));:}
| parAbierto EXPRESION:a parCerrado {:RESULT=new Production(new Node("Expresion"), a.getIns());
                    RESULT.addSon("(");
                    RESULT.addSon(a);
                    RESULT.addSon(")");
                    :}
;

/*VARIABLE_CICLO::=
EXPRESION:a {:
            RESULT=new Production(new Node("VariableCiclo"), new VariableCiclo(a.getIns()));
            RESULT.addSon(a);
            :}
;*/

EXPRESION_RELACIONAL::=
VARIABLE_RELACIONAL:a mayor VARIABLE_RELACIONAL:b {:
            RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.mayor));
            RESULT.addSon(a);
            RESULT.addSon("mayor");
            RESULT.addSon(b);
            :}
| VARIABLE_RELACIONAL:a menor VARIABLE_RELACIONAL:b {:
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.menor));
              RESULT.addSon(a);
              RESULT.addSon("menor");
              RESULT.addSon(b);
              :}
| VARIABLE_RELACIONAL:a mayor_o_igual VARIABLE_RELACIONAL:b {:
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.mayor_o_igual));
              RESULT.addSon(a);
              RESULT.addSon("mayor_o_igual");
              RESULT.addSon(b);
              :}
| VARIABLE_RELACIONAL:a and VARIABLE_RELACIONAL:b {:
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.and));
              RESULT.addSon(a);
              RESULT.addSon("and");
              RESULT.addSon(b);
              :}
| VARIABLE_RELACIONAL:a es_igual VARIABLE_RELACIONAL:b {:
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.es_igual));
              RESULT.addSon(a);
              RESULT.addSon("es_igual");
              RESULT.addSon(b);
              :}
| VARIABLE_RELACIONAL:a es_diferente VARIABLE_RELACIONAL:b {:
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.es_diferente));
              RESULT.addSon(a);
              RESULT.addSon("es_diferente");
              RESULT.addSon(b);
              :}
| VARIABLE_RELACIONAL:a or VARIABLE_RELACIONAL:b {:
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.or));
              RESULT.addSon(a);
              RESULT.addSon("or");
              RESULT.addSon(b);
              :}
| VARIABLE_RELACIONAL:a not VARIABLE_RELACIONAL:b {:
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.NOT));
              RESULT.addSon(a);
              RESULT.addSon("not");
              RESULT.addSon(b);
              :}
| VARIABLE_RELACIONAL:a menor_o_igual VARIABLE_RELACIONAL:b {:
              RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.menor_o_igual));
              RESULT.addSon(a);
              RESULT.addSon("menor_o_igual");
              RESULT.addSon(b);
              :}
| not EXPRESION_RELACIONAL:a {:
            RESULT=new Production(new Node("ExpresionRelacional"), new Operacion((Operacion)a.getIns(), Operacion.Tipo_operacion.NOT));
            RESULT.addSon("not");
            RESULT.addSon(a);
            :}
;

VARIABLE_RELACIONAL::=
 EXPRESION:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion((Operacion)a.getIns(), Operacion.Tipo_operacion.VARIABLE));
            RESULT.addSon(a);
            :}
| valorcadena:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.CADENA));
            RESULT.addSon(a);
            :}
| valorcaracter:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.CARACTER));
            RESULT.addSon(a);
            :}
| caracter_ascii:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.CARACTER_ASCII));
            RESULT.addSon(a);
            :}
| verdadero:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.VERDADERO));
            RESULT.addSon(a);
            :}
| falso:a {:
            RESULT=new Production(new Node("VariableRelacional"), new Operacion(a.toString(), Operacion.Tipo_operacion.FALSO));
            RESULT.addSon(a);
            :}
;

/*

VALOR_RACIONAL::=
mayor {:RESULT="mayor";:}
| menor {:RESULT="menor";:}
| mayor_o_igual {:RESULT="mayor_o_igual";:}
| menor_o_igual {:RESULT="menor_o_igual";:}
| es_igual {:RESULT="es_igual";:}
| es_diferente {:RESULT="es_diferente";:}
| or {:RESULT="or";:}
| and {:RESULT="and";:}
| not {:RESULT="NOT";:}
;*/